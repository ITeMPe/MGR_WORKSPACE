
Mgr_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  080031f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
  8 .bss          000001a4  20000094  20000094  00020094  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000238  20000238  00020094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000e242  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002860  00000000  00000000  0002e306  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005131  00000000  00000000  00030b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  00035c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00036648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004baa  00000000  00000000  00037218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003540  00000000  00000000  0003bdc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003f302  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002120  00000000  00000000  0003f380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003080 	.word	0x08003080

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08003080 	.word	0x08003080

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f8aa 	bl	8000710 <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f85e 	bl	800068c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f82f 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 fbf0 	bl	8001df4 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200000bc 	.word	0x200000bc
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200000bc 	.word	0x200000bc

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
 8000642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff6 	bl	8000634 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000648:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800064a:	bf1c      	itt	ne
 800064c:	4b05      	ldrne	r3, [pc, #20]	; (8000664 <HAL_Delay+0x24>)
 800064e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000650:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000652:	bf18      	it	ne
 8000654:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	f7ff ffed 	bl	8000634 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	4284      	cmp	r4, r0
 800065e:	d8fa      	bhi.n	8000656 <HAL_Delay+0x16>
  {
  }
}
 8000660:	bd38      	pop	{r3, r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800066a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000670:	041b      	lsls	r3, r3, #16
 8000672:	0c1b      	lsrs	r3, r3, #16
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	0200      	lsls	r0, r0, #8
 800067a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000682:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000684:	60d3      	str	r3, [r2, #12]
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	68dc      	ldr	r4, [r3, #12]
 8000692:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000696:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069c:	2b04      	cmp	r3, #4
 800069e:	bf28      	it	cs
 80006a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 0501 	mov.w	r5, #1
 80006a8:	fa05 f303 	lsl.w	r3, r5, r3
 80006ac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b0:	bf8c      	ite	hi
 80006b2:	3c03      	subhi	r4, #3
 80006b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b6:	4019      	ands	r1, r3
 80006b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	fa05 f404 	lsl.w	r4, r5, r4
 80006be:	3c01      	subs	r4, #1
 80006c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	ea42 0201 	orr.w	r2, r2, r1
 80006c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	bfad      	iteet	ge
 80006ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	f000 000f 	andlt.w	r0, r0, #15
 80006d6:	4b06      	ldrlt	r3, [pc, #24]	; (80006f0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	bfb5      	itete	lt
 80006de:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000ed14 	.word	0xe000ed14

080006f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006f4:	2800      	cmp	r0, #0
 80006f6:	db08      	blt.n	800070a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f8:	0942      	lsrs	r2, r0, #5
 80006fa:	2301      	movs	r3, #1
 80006fc:	f000 001f 	and.w	r0, r0, #31
 8000700:	fa03 f000 	lsl.w	r0, r3, r0
 8000704:	4b01      	ldr	r3, [pc, #4]	; (800070c <HAL_NVIC_EnableIRQ+0x18>)
 8000706:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100

08000710 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	3801      	subs	r0, #1
 8000712:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000716:	d20a      	bcs.n	800072e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	21f0      	movs	r1, #240	; 0xf0
 8000720:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000724:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000726:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000728:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800072e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e010 	.word	0xe000e010
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800073c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000740:	2b02      	cmp	r3, #2
 8000742:	d003      	beq.n	800074c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000748:	2001      	movs	r0, #1
 800074a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800074c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800074e:	2305      	movs	r3, #5
 8000750:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000754:	6813      	ldr	r3, [r2, #0]
 8000756:	f023 0301 	bic.w	r3, r3, #1
 800075a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800075c:	2000      	movs	r0, #0
}
 800075e:	4770      	bx	lr

08000760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000764:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000766:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000768:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000930 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800076c:	4a6e      	ldr	r2, [pc, #440]	; (8000928 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000934 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000772:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000774:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000776:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800077a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800077c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000780:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000784:	45b6      	cmp	lr, r6
 8000786:	f040 80b6 	bne.w	80008f6 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800078a:	684c      	ldr	r4, [r1, #4]
 800078c:	f024 0710 	bic.w	r7, r4, #16
 8000790:	2f02      	cmp	r7, #2
 8000792:	d116      	bne.n	80007c2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000794:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000798:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800079c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007a0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007a8:	f04f 0c0f 	mov.w	ip, #15
 80007ac:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007b0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007b4:	690d      	ldr	r5, [r1, #16]
 80007b6:	fa05 f50b 	lsl.w	r5, r5, fp
 80007ba:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007be:	f8ca 5020 	str.w	r5, [sl, #32]
 80007c2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007c8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007cc:	fa05 f50a 	lsl.w	r5, r5, sl
 80007d0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007d2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007d6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007da:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007de:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007e0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007e6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ea:	d811      	bhi.n	8000810 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007ec:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ee:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007f2:	68cf      	ldr	r7, [r1, #12]
 80007f4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007f8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007fc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007fe:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000800:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000804:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000808:	409f      	lsls	r7, r3
 800080a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800080e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000810:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000812:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000814:	688f      	ldr	r7, [r1, #8]
 8000816:	fa07 f70a 	lsl.w	r7, r7, sl
 800081a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800081c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800081e:	00e5      	lsls	r5, r4, #3
 8000820:	d569      	bpl.n	80008f6 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	f04f 0b00 	mov.w	fp, #0
 8000826:	f8cd b00c 	str.w	fp, [sp, #12]
 800082a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800082e:	4d3f      	ldr	r5, [pc, #252]	; (800092c <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000830:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000834:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000838:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800083c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000840:	9703      	str	r7, [sp, #12]
 8000842:	9f03      	ldr	r7, [sp, #12]
 8000844:	f023 0703 	bic.w	r7, r3, #3
 8000848:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800084c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000850:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000854:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000858:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800085c:	f04f 0e0f 	mov.w	lr, #15
 8000860:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000864:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000866:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800086a:	d04b      	beq.n	8000904 <HAL_GPIO_Init+0x1a4>
 800086c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000870:	42a8      	cmp	r0, r5
 8000872:	d049      	beq.n	8000908 <HAL_GPIO_Init+0x1a8>
 8000874:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000878:	42a8      	cmp	r0, r5
 800087a:	d047      	beq.n	800090c <HAL_GPIO_Init+0x1ac>
 800087c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000880:	42a8      	cmp	r0, r5
 8000882:	d045      	beq.n	8000910 <HAL_GPIO_Init+0x1b0>
 8000884:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000888:	42a8      	cmp	r0, r5
 800088a:	d043      	beq.n	8000914 <HAL_GPIO_Init+0x1b4>
 800088c:	4548      	cmp	r0, r9
 800088e:	d043      	beq.n	8000918 <HAL_GPIO_Init+0x1b8>
 8000890:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000894:	42a8      	cmp	r0, r5
 8000896:	d041      	beq.n	800091c <HAL_GPIO_Init+0x1bc>
 8000898:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800089c:	42a8      	cmp	r0, r5
 800089e:	d03f      	beq.n	8000920 <HAL_GPIO_Init+0x1c0>
 80008a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008a4:	42a8      	cmp	r0, r5
 80008a6:	d03d      	beq.n	8000924 <HAL_GPIO_Init+0x1c4>
 80008a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ac:	42a8      	cmp	r0, r5
 80008ae:	bf14      	ite	ne
 80008b0:	250a      	movne	r5, #10
 80008b2:	2509      	moveq	r5, #9
 80008b4:	fa05 f50c 	lsl.w	r5, r5, ip
 80008b8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008bc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80008be:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008c0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008c2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008c6:	bf0c      	ite	eq
 80008c8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008ca:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80008cc:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80008ce:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008d0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008d4:	bf0c      	ite	eq
 80008d6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008d8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008da:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008dc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008de:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008e2:	bf0c      	ite	eq
 80008e4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008e6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008e8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008ea:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ec:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008ee:	bf54      	ite	pl
 80008f0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008f2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008f4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008f6:	3301      	adds	r3, #1
 80008f8:	2b10      	cmp	r3, #16
 80008fa:	f47f af3c 	bne.w	8000776 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008fe:	b005      	add	sp, #20
 8000900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000904:	465d      	mov	r5, fp
 8000906:	e7d5      	b.n	80008b4 <HAL_GPIO_Init+0x154>
 8000908:	2501      	movs	r5, #1
 800090a:	e7d3      	b.n	80008b4 <HAL_GPIO_Init+0x154>
 800090c:	2502      	movs	r5, #2
 800090e:	e7d1      	b.n	80008b4 <HAL_GPIO_Init+0x154>
 8000910:	2503      	movs	r5, #3
 8000912:	e7cf      	b.n	80008b4 <HAL_GPIO_Init+0x154>
 8000914:	2504      	movs	r5, #4
 8000916:	e7cd      	b.n	80008b4 <HAL_GPIO_Init+0x154>
 8000918:	2505      	movs	r5, #5
 800091a:	e7cb      	b.n	80008b4 <HAL_GPIO_Init+0x154>
 800091c:	2506      	movs	r5, #6
 800091e:	e7c9      	b.n	80008b4 <HAL_GPIO_Init+0x154>
 8000920:	2507      	movs	r5, #7
 8000922:	e7c7      	b.n	80008b4 <HAL_GPIO_Init+0x154>
 8000924:	2508      	movs	r5, #8
 8000926:	e7c5      	b.n	80008b4 <HAL_GPIO_Init+0x154>
 8000928:	40013c00 	.word	0x40013c00
 800092c:	40020000 	.word	0x40020000
 8000930:	40023800 	.word	0x40023800
 8000934:	40021400 	.word	0x40021400

08000938 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000938:	b10a      	cbz	r2, 800093e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800093a:	6181      	str	r1, [r0, #24]
 800093c:	4770      	bx	lr
 800093e:	0409      	lsls	r1, r1, #16
 8000940:	e7fb      	b.n	800093a <HAL_GPIO_WritePin+0x2>
	...

08000944 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000944:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800094c:	4c18      	ldr	r4, [pc, #96]	; (80009b0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000950:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000954:	641a      	str	r2, [r3, #64]	; 0x40
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_PWREx_EnableOverDrive+0x70>)
 8000962:	2201      	movs	r2, #1
 8000964:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000966:	f7ff fe65 	bl	8000634 <HAL_GetTick>
 800096a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800096c:	6863      	ldr	r3, [r4, #4]
 800096e:	03da      	lsls	r2, r3, #15
 8000970:	d50b      	bpl.n	800098a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000974:	4c0e      	ldr	r4, [pc, #56]	; (80009b0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800097a:	f7ff fe5b 	bl	8000634 <HAL_GetTick>
 800097e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000980:	6863      	ldr	r3, [r4, #4]
 8000982:	039b      	lsls	r3, r3, #14
 8000984:	d50a      	bpl.n	800099c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000986:	2000      	movs	r0, #0
 8000988:	e006      	b.n	8000998 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800098a:	f7ff fe53 	bl	8000634 <HAL_GetTick>
 800098e:	1b40      	subs	r0, r0, r5
 8000990:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000994:	d9ea      	bls.n	800096c <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000996:	2003      	movs	r0, #3
}
 8000998:	b003      	add	sp, #12
 800099a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800099c:	f7ff fe4a 	bl	8000634 <HAL_GetTick>
 80009a0:	1b40      	subs	r0, r0, r5
 80009a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80009a6:	d9eb      	bls.n	8000980 <HAL_PWREx_EnableOverDrive+0x3c>
 80009a8:	e7f5      	b.n	8000996 <HAL_PWREx_EnableOverDrive+0x52>
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000
 80009b4:	420e0040 	.word	0x420e0040
 80009b8:	420e0044 	.word	0x420e0044

080009bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009c0:	4604      	mov	r4, r0
 80009c2:	b918      	cbnz	r0, 80009cc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80009c4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80009c6:	b002      	add	sp, #8
 80009c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009cc:	6803      	ldr	r3, [r0, #0]
 80009ce:	07dd      	lsls	r5, r3, #31
 80009d0:	d410      	bmi.n	80009f4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	0798      	lsls	r0, r3, #30
 80009d6:	d458      	bmi.n	8000a8a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	071a      	lsls	r2, r3, #28
 80009dc:	f100 809a 	bmi.w	8000b14 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	075b      	lsls	r3, r3, #29
 80009e4:	f100 80b8 	bmi.w	8000b58 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009e8:	69a2      	ldr	r2, [r4, #24]
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f040 8119 	bne.w	8000c22 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80009f0:	2000      	movs	r0, #0
 80009f2:	e7e8      	b.n	80009c6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009f4:	4ba6      	ldr	r3, [pc, #664]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
 80009f6:	689a      	ldr	r2, [r3, #8]
 80009f8:	f002 020c 	and.w	r2, r2, #12
 80009fc:	2a04      	cmp	r2, #4
 80009fe:	d007      	beq.n	8000a10 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a06:	2a08      	cmp	r2, #8
 8000a08:	d10a      	bne.n	8000a20 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	0259      	lsls	r1, r3, #9
 8000a0e:	d507      	bpl.n	8000a20 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a10:	4b9f      	ldr	r3, [pc, #636]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	039a      	lsls	r2, r3, #14
 8000a16:	d5dc      	bpl.n	80009d2 <HAL_RCC_OscConfig+0x16>
 8000a18:	6863      	ldr	r3, [r4, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1d9      	bne.n	80009d2 <HAL_RCC_OscConfig+0x16>
 8000a1e:	e7d1      	b.n	80009c4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a20:	6863      	ldr	r3, [r4, #4]
 8000a22:	4d9b      	ldr	r5, [pc, #620]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
 8000a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a28:	d111      	bne.n	8000a4e <HAL_RCC_OscConfig+0x92>
 8000a2a:	682b      	ldr	r3, [r5, #0]
 8000a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a30:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a32:	f7ff fdff 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a36:	4d96      	ldr	r5, [pc, #600]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	039b      	lsls	r3, r3, #14
 8000a3e:	d4c8      	bmi.n	80009d2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a40:	f7ff fdf8 	bl	8000634 <HAL_GetTick>
 8000a44:	1b80      	subs	r0, r0, r6
 8000a46:	2864      	cmp	r0, #100	; 0x64
 8000a48:	d9f7      	bls.n	8000a3a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000a4a:	2003      	movs	r0, #3
 8000a4c:	e7bb      	b.n	80009c6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a52:	d104      	bne.n	8000a5e <HAL_RCC_OscConfig+0xa2>
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a5a:	602b      	str	r3, [r5, #0]
 8000a5c:	e7e5      	b.n	8000a2a <HAL_RCC_OscConfig+0x6e>
 8000a5e:	682a      	ldr	r2, [r5, #0]
 8000a60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a64:	602a      	str	r2, [r5, #0]
 8000a66:	682a      	ldr	r2, [r5, #0]
 8000a68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a6c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1df      	bne.n	8000a32 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000a72:	f7ff fddf 	bl	8000634 <HAL_GetTick>
 8000a76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	039f      	lsls	r7, r3, #14
 8000a7c:	d5a9      	bpl.n	80009d2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fdd9 	bl	8000634 <HAL_GetTick>
 8000a82:	1b80      	subs	r0, r0, r6
 8000a84:	2864      	cmp	r0, #100	; 0x64
 8000a86:	d9f7      	bls.n	8000a78 <HAL_RCC_OscConfig+0xbc>
 8000a88:	e7df      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a8a:	4b81      	ldr	r3, [pc, #516]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	f012 0f0c 	tst.w	r2, #12
 8000a92:	d007      	beq.n	8000aa4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a9a:	2a08      	cmp	r2, #8
 8000a9c:	d111      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	025e      	lsls	r6, r3, #9
 8000aa2:	d40e      	bmi.n	8000ac2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aa4:	4b7a      	ldr	r3, [pc, #488]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	0795      	lsls	r5, r2, #30
 8000aaa:	d502      	bpl.n	8000ab2 <HAL_RCC_OscConfig+0xf6>
 8000aac:	68e2      	ldr	r2, [r4, #12]
 8000aae:	2a01      	cmp	r2, #1
 8000ab0:	d188      	bne.n	80009c4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	6921      	ldr	r1, [r4, #16]
 8000ab6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000aba:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000abe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ac0:	e78a      	b.n	80009d8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ac2:	68e2      	ldr	r2, [r4, #12]
 8000ac4:	4b73      	ldr	r3, [pc, #460]	; (8000c94 <HAL_RCC_OscConfig+0x2d8>)
 8000ac6:	b1b2      	cbz	r2, 8000af6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000acc:	f7ff fdb2 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad0:	4d6f      	ldr	r5, [pc, #444]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000ad2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	0798      	lsls	r0, r3, #30
 8000ad8:	d507      	bpl.n	8000aea <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ada:	682b      	ldr	r3, [r5, #0]
 8000adc:	6922      	ldr	r2, [r4, #16]
 8000ade:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ae2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ae6:	602b      	str	r3, [r5, #0]
 8000ae8:	e776      	b.n	80009d8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aea:	f7ff fda3 	bl	8000634 <HAL_GetTick>
 8000aee:	1b80      	subs	r0, r0, r6
 8000af0:	2802      	cmp	r0, #2
 8000af2:	d9ef      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x118>
 8000af4:	e7a9      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000af6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000af8:	f7ff fd9c 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000afc:	4d64      	ldr	r5, [pc, #400]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000afe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	0799      	lsls	r1, r3, #30
 8000b04:	f57f af68 	bpl.w	80009d8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b08:	f7ff fd94 	bl	8000634 <HAL_GetTick>
 8000b0c:	1b80      	subs	r0, r0, r6
 8000b0e:	2802      	cmp	r0, #2
 8000b10:	d9f6      	bls.n	8000b00 <HAL_RCC_OscConfig+0x144>
 8000b12:	e79a      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b14:	6962      	ldr	r2, [r4, #20]
 8000b16:	4b60      	ldr	r3, [pc, #384]	; (8000c98 <HAL_RCC_OscConfig+0x2dc>)
 8000b18:	b17a      	cbz	r2, 8000b3a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b1e:	f7ff fd89 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b22:	4d5b      	ldr	r5, [pc, #364]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000b24:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b26:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b28:	079f      	lsls	r7, r3, #30
 8000b2a:	f53f af59 	bmi.w	80009e0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b2e:	f7ff fd81 	bl	8000634 <HAL_GetTick>
 8000b32:	1b80      	subs	r0, r0, r6
 8000b34:	2802      	cmp	r0, #2
 8000b36:	d9f6      	bls.n	8000b26 <HAL_RCC_OscConfig+0x16a>
 8000b38:	e787      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000b3a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b3c:	f7ff fd7a 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b40:	4d53      	ldr	r5, [pc, #332]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000b42:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b44:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b46:	0798      	lsls	r0, r3, #30
 8000b48:	f57f af4a 	bpl.w	80009e0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b4c:	f7ff fd72 	bl	8000634 <HAL_GetTick>
 8000b50:	1b80      	subs	r0, r0, r6
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9f6      	bls.n	8000b44 <HAL_RCC_OscConfig+0x188>
 8000b56:	e778      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b58:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
 8000b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000b60:	d128      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b76:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b78:	4d48      	ldr	r5, [pc, #288]	; (8000c9c <HAL_RCC_OscConfig+0x2e0>)
 8000b7a:	682b      	ldr	r3, [r5, #0]
 8000b7c:	05d9      	lsls	r1, r3, #23
 8000b7e:	d51b      	bpl.n	8000bb8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b80:	68a3      	ldr	r3, [r4, #8]
 8000b82:	4d43      	ldr	r5, [pc, #268]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d127      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x21c>
 8000b88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b90:	f7ff fd50 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b94:	4d3e      	ldr	r5, [pc, #248]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000b96:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b98:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b9e:	079b      	lsls	r3, r3, #30
 8000ba0:	d539      	bpl.n	8000c16 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	f43f af20 	beq.w	80009e8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ba8:	4a39      	ldr	r2, [pc, #228]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
 8000baa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	e719      	b.n	80009e8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	e7df      	b.n	8000b78 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bb8:	682b      	ldr	r3, [r5, #0]
 8000bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000bc0:	f7ff fd38 	bl	8000634 <HAL_GetTick>
 8000bc4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	05da      	lsls	r2, r3, #23
 8000bca:	d4d9      	bmi.n	8000b80 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bcc:	f7ff fd32 	bl	8000634 <HAL_GetTick>
 8000bd0:	1bc0      	subs	r0, r0, r7
 8000bd2:	2802      	cmp	r0, #2
 8000bd4:	d9f7      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x20a>
 8000bd6:	e738      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd8:	2b05      	cmp	r3, #5
 8000bda:	d104      	bne.n	8000be6 <HAL_RCC_OscConfig+0x22a>
 8000bdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	672b      	str	r3, [r5, #112]	; 0x70
 8000be4:	e7d0      	b.n	8000b88 <HAL_RCC_OscConfig+0x1cc>
 8000be6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000be8:	f022 0201 	bic.w	r2, r2, #1
 8000bec:	672a      	str	r2, [r5, #112]	; 0x70
 8000bee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000bf0:	f022 0204 	bic.w	r2, r2, #4
 8000bf4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1ca      	bne.n	8000b90 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000bfa:	f7ff fd1b 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bfe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c02:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c06:	0798      	lsls	r0, r3, #30
 8000c08:	d5cb      	bpl.n	8000ba2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c0a:	f7ff fd13 	bl	8000634 <HAL_GetTick>
 8000c0e:	1bc0      	subs	r0, r0, r7
 8000c10:	4540      	cmp	r0, r8
 8000c12:	d9f7      	bls.n	8000c04 <HAL_RCC_OscConfig+0x248>
 8000c14:	e719      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c16:	f7ff fd0d 	bl	8000634 <HAL_GetTick>
 8000c1a:	1bc0      	subs	r0, r0, r7
 8000c1c:	4540      	cmp	r0, r8
 8000c1e:	d9bd      	bls.n	8000b9c <HAL_RCC_OscConfig+0x1e0>
 8000c20:	e713      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c22:	4d1b      	ldr	r5, [pc, #108]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
 8000c24:	68ab      	ldr	r3, [r5, #8]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	f43f aeca 	beq.w	80009c4 <HAL_RCC_OscConfig+0x8>
 8000c30:	4e1b      	ldr	r6, [pc, #108]	; (8000ca0 <HAL_RCC_OscConfig+0x2e4>)
 8000c32:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c34:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000c36:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c38:	d134      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fcfb 	bl	8000634 <HAL_GetTick>
 8000c3e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c40:	682b      	ldr	r3, [r5, #0]
 8000c42:	0199      	lsls	r1, r3, #6
 8000c44:	d41e      	bmi.n	8000c84 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c46:	6a22      	ldr	r2, [r4, #32]
 8000c48:	69e3      	ldr	r3, [r4, #28]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c4e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c5a:	4c0d      	ldr	r4, [pc, #52]	; (8000c90 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c5c:	0852      	lsrs	r2, r2, #1
 8000c5e:	3a01      	subs	r2, #1
 8000c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c64:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c66:	2301      	movs	r3, #1
 8000c68:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c6a:	f7ff fce3 	bl	8000634 <HAL_GetTick>
 8000c6e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	019a      	lsls	r2, r3, #6
 8000c74:	f53f aebc 	bmi.w	80009f0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c78:	f7ff fcdc 	bl	8000634 <HAL_GetTick>
 8000c7c:	1b40      	subs	r0, r0, r5
 8000c7e:	2802      	cmp	r0, #2
 8000c80:	d9f6      	bls.n	8000c70 <HAL_RCC_OscConfig+0x2b4>
 8000c82:	e6e2      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c84:	f7ff fcd6 	bl	8000634 <HAL_GetTick>
 8000c88:	1bc0      	subs	r0, r0, r7
 8000c8a:	2802      	cmp	r0, #2
 8000c8c:	d9d8      	bls.n	8000c40 <HAL_RCC_OscConfig+0x284>
 8000c8e:	e6dc      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
 8000c90:	40023800 	.word	0x40023800
 8000c94:	42470000 	.word	0x42470000
 8000c98:	42470e80 	.word	0x42470e80
 8000c9c:	40007000 	.word	0x40007000
 8000ca0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fcc6 	bl	8000634 <HAL_GetTick>
 8000ca8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000caa:	682b      	ldr	r3, [r5, #0]
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	f57f ae9f 	bpl.w	80009f0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cb2:	f7ff fcbf 	bl	8000634 <HAL_GetTick>
 8000cb6:	1b00      	subs	r0, r0, r4
 8000cb8:	2802      	cmp	r0, #2
 8000cba:	d9f6      	bls.n	8000caa <HAL_RCC_OscConfig+0x2ee>
 8000cbc:	e6c5      	b.n	8000a4a <HAL_RCC_OscConfig+0x8e>
 8000cbe:	bf00      	nop

08000cc0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cc0:	4913      	ldr	r1, [pc, #76]	; (8000d10 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000cc2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cc4:	688b      	ldr	r3, [r1, #8]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d003      	beq.n	8000cd6 <HAL_RCC_GetSysClockFreq+0x16>
 8000cce:	2b08      	cmp	r3, #8
 8000cd0:	d003      	beq.n	8000cda <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000cd2:	4810      	ldr	r0, [pc, #64]	; (8000d14 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cd4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000cd6:	4810      	ldr	r0, [pc, #64]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x58>)
 8000cd8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cda:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cdc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cde:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ce0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ce4:	bf14      	ite	ne
 8000ce6:	480c      	ldrne	r0, [pc, #48]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ce8:	480a      	ldreq	r0, [pc, #40]	; (8000d14 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000cee:	bf18      	it	ne
 8000cf0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cf2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cf6:	fba1 0100 	umull	r0, r1, r1, r0
 8000cfa:	f7ff fac9 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <HAL_RCC_GetSysClockFreq+0x50>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d06:	3301      	adds	r3, #1
 8000d08:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000d0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d0e:	bd08      	pop	{r3, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	00f42400 	.word	0x00f42400
 8000d18:	017d7840 	.word	0x017d7840

08000d1c <HAL_RCC_ClockConfig>:
{
 8000d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d20:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d22:	4604      	mov	r4, r0
 8000d24:	b910      	cbnz	r0, 8000d2c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d26:	2001      	movs	r0, #1
 8000d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d2c:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <HAL_RCC_ClockConfig+0x124>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	f002 020f 	and.w	r2, r2, #15
 8000d34:	428a      	cmp	r2, r1
 8000d36:	d328      	bcc.n	8000d8a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d38:	6821      	ldr	r1, [r4, #0]
 8000d3a:	078f      	lsls	r7, r1, #30
 8000d3c:	d42d      	bmi.n	8000d9a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d3e:	07c8      	lsls	r0, r1, #31
 8000d40:	d440      	bmi.n	8000dc4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d42:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <HAL_RCC_ClockConfig+0x124>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	f002 020f 	and.w	r2, r2, #15
 8000d4a:	4295      	cmp	r5, r2
 8000d4c:	d366      	bcc.n	8000e1c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d4e:	6822      	ldr	r2, [r4, #0]
 8000d50:	0751      	lsls	r1, r2, #29
 8000d52:	d46c      	bmi.n	8000e2e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d54:	0713      	lsls	r3, r2, #28
 8000d56:	d507      	bpl.n	8000d68 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d58:	4a3a      	ldr	r2, [pc, #232]	; (8000e44 <HAL_RCC_ClockConfig+0x128>)
 8000d5a:	6921      	ldr	r1, [r4, #16]
 8000d5c:	6893      	ldr	r3, [r2, #8]
 8000d5e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d62:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d66:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d68:	f7ff ffaa 	bl	8000cc0 <HAL_RCC_GetSysClockFreq>
 8000d6c:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <HAL_RCC_ClockConfig+0x128>)
 8000d6e:	4a36      	ldr	r2, [pc, #216]	; (8000e48 <HAL_RCC_ClockConfig+0x12c>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d76:	5cd3      	ldrb	r3, [r2, r3]
 8000d78:	40d8      	lsrs	r0, r3
 8000d7a:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <HAL_RCC_ClockConfig+0x130>)
 8000d7c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff fc0e 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000d84:	2000      	movs	r0, #0
 8000d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d8a:	b2ca      	uxtb	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 030f 	and.w	r3, r3, #15
 8000d94:	4299      	cmp	r1, r3
 8000d96:	d1c6      	bne.n	8000d26 <HAL_RCC_ClockConfig+0xa>
 8000d98:	e7ce      	b.n	8000d38 <HAL_RCC_ClockConfig+0x1c>
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d9c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000da0:	bf1e      	ittt	ne
 8000da2:	689a      	ldrne	r2, [r3, #8]
 8000da4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000da8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000daa:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000dac:	bf42      	ittt	mi
 8000dae:	689a      	ldrmi	r2, [r3, #8]
 8000db0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000db4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	68a0      	ldr	r0, [r4, #8]
 8000dba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000dbe:	4302      	orrs	r2, r0
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	e7bc      	b.n	8000d3e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dc4:	6862      	ldr	r2, [r4, #4]
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_RCC_ClockConfig+0x128>)
 8000dc8:	2a01      	cmp	r2, #1
 8000dca:	d11d      	bne.n	8000e08 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd2:	d0a8      	beq.n	8000d26 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dd4:	4e1b      	ldr	r6, [pc, #108]	; (8000e44 <HAL_RCC_ClockConfig+0x128>)
 8000dd6:	68b3      	ldr	r3, [r6, #8]
 8000dd8:	f023 0303 	bic.w	r3, r3, #3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000de0:	f7ff fc28 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000de8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dea:	68b3      	ldr	r3, [r6, #8]
 8000dec:	6862      	ldr	r2, [r4, #4]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000df6:	d0a4      	beq.n	8000d42 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000df8:	f7ff fc1c 	bl	8000634 <HAL_GetTick>
 8000dfc:	1bc0      	subs	r0, r0, r7
 8000dfe:	4540      	cmp	r0, r8
 8000e00:	d9f3      	bls.n	8000dea <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000e02:	2003      	movs	r0, #3
}
 8000e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e08:	1e91      	subs	r1, r2, #2
 8000e0a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e0c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e0e:	d802      	bhi.n	8000e16 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e10:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e14:	e7dd      	b.n	8000dd2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e16:	f013 0f02 	tst.w	r3, #2
 8000e1a:	e7da      	b.n	8000dd2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e1c:	b2ea      	uxtb	r2, r5
 8000e1e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	429d      	cmp	r5, r3
 8000e28:	f47f af7d 	bne.w	8000d26 <HAL_RCC_ClockConfig+0xa>
 8000e2c:	e78f      	b.n	8000d4e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e2e:	4905      	ldr	r1, [pc, #20]	; (8000e44 <HAL_RCC_ClockConfig+0x128>)
 8000e30:	68e0      	ldr	r0, [r4, #12]
 8000e32:	688b      	ldr	r3, [r1, #8]
 8000e34:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e38:	4303      	orrs	r3, r0
 8000e3a:	608b      	str	r3, [r1, #8]
 8000e3c:	e78a      	b.n	8000d54 <HAL_RCC_ClockConfig+0x38>
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00
 8000e44:	40023800 	.word	0x40023800
 8000e48:	08003131 	.word	0x08003131
 8000e4c:	2000002c 	.word	0x2000002c

08000e50 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000e5a:	5cd3      	ldrb	r3, [r2, r3]
 8000e5c:	4a03      	ldr	r2, [pc, #12]	; (8000e6c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e5e:	6810      	ldr	r0, [r2, #0]
}
 8000e60:	40d8      	lsrs	r0, r3
 8000e62:	4770      	bx	lr
 8000e64:	40023800 	.word	0x40023800
 8000e68:	08003141 	.word	0x08003141
 8000e6c:	2000002c 	.word	0x2000002c

08000e70 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
 8000e7c:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e7e:	6810      	ldr	r0, [r2, #0]
}
 8000e80:	40d8      	lsrs	r0, r3
 8000e82:	4770      	bx	lr
 8000e84:	40023800 	.word	0x40023800
 8000e88:	08003141 	.word	0x08003141
 8000e8c:	2000002c 	.word	0x2000002c

08000e90 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000e90:	b570      	push	{r4, r5, r6, lr}
 8000e92:	4604      	mov	r4, r0
 8000e94:	460d      	mov	r5, r1
 8000e96:	4616      	mov	r6, r2
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	6898      	ldr	r0, [r3, #8]
 8000e9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ea0:	d100      	bne.n	8000ea4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x14>
      }
    }
  }

  return HAL_OK;
}
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000ea4:	1c6a      	adds	r2, r5, #1
 8000ea6:	d0f8      	beq.n	8000e9a <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000ea8:	f7ff fbc4 	bl	8000634 <HAL_GetTick>
 8000eac:	1b80      	subs	r0, r0, r6
 8000eae:	4285      	cmp	r5, r0
 8000eb0:	d8f2      	bhi.n	8000e98 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000eba:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ebc:	6862      	ldr	r2, [r4, #4]
 8000ebe:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000ec2:	d10a      	bne.n	8000eda <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4a>
 8000ec4:	68a2      	ldr	r2, [r4, #8]
 8000ec6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000eca:	d002      	beq.n	8000ed2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x42>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ecc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000ed0:	d103      	bne.n	8000eda <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4a>
          __HAL_SPI_DISABLE(hspi);
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ed8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000eda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000edc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ee0:	d107      	bne.n	8000ef2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x62>
          SPI_RESET_CRC(hspi);
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ef0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000efe:	2003      	movs	r0, #3
 8000f00:	bd70      	pop	{r4, r5, r6, pc}

08000f02 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000f02:	b510      	push	{r4, lr}
 8000f04:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000f06:	f7ff ffc3 	bl	8000e90 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8000f0a:	b120      	cbz	r0, 8000f16 <SPI_EndRxTxTransaction+0x14>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000f14:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000f16:	bd10      	pop	{r4, pc}

08000f18 <HAL_SPI_Init>:
{
 8000f18:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d036      	beq.n	8000f8e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f24:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f2c:	b91b      	cbnz	r3, 8000f36 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000f2e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000f32:	f000 feff 	bl	8001d34 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000f36:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f38:	68a0      	ldr	r0, [r4, #8]
 8000f3a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000f42:	680b      	ldr	r3, [r1, #0]
 8000f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f48:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f4a:	6863      	ldr	r3, [r4, #4]
 8000f4c:	4303      	orrs	r3, r0
 8000f4e:	68e0      	ldr	r0, [r4, #12]
 8000f50:	4303      	orrs	r3, r0
 8000f52:	6920      	ldr	r0, [r4, #16]
 8000f54:	4303      	orrs	r3, r0
 8000f56:	6960      	ldr	r0, [r4, #20]
 8000f58:	4303      	orrs	r3, r0
 8000f5a:	69e0      	ldr	r0, [r4, #28]
 8000f5c:	4303      	orrs	r3, r0
 8000f5e:	6a20      	ldr	r0, [r4, #32]
 8000f60:	4303      	orrs	r3, r0
 8000f62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f64:	4303      	orrs	r3, r0
 8000f66:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000f6a:	4303      	orrs	r3, r0
 8000f6c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f6e:	0c12      	lsrs	r2, r2, #16
 8000f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f72:	f002 0204 	and.w	r2, r2, #4
 8000f76:	431a      	orrs	r2, r3
 8000f78:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f7a:	69cb      	ldr	r3, [r1, #28]
 8000f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f80:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f82:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f84:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f86:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f88:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000f8c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
}
 8000f90:	bd10      	pop	{r4, pc}

08000f92 <HAL_SPI_TransmitReceive>:
{
 8000f92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f96:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000f98:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000f9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000f9e:	2b01      	cmp	r3, #1
{
 8000fa0:	4604      	mov	r4, r0
 8000fa2:	460d      	mov	r5, r1
 8000fa4:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000fa6:	f000 80e2 	beq.w	800116e <HAL_SPI_TransmitReceive+0x1dc>
 8000faa:	2301      	movs	r3, #1
 8000fac:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000fb0:	f7ff fb40 	bl	8000634 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000fb4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8000fb8:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8000fba:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000fbc:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000fbe:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000fc0:	d00a      	beq.n	8000fd8 <HAL_SPI_TransmitReceive+0x46>
 8000fc2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000fc6:	f040 80d0 	bne.w	800116a <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000fca:	68a0      	ldr	r0, [r4, #8]
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	f040 80cc 	bne.w	800116a <HAL_SPI_TransmitReceive+0x1d8>
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	f040 80c9 	bne.w	800116a <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	f000 80c4 	beq.w	8001166 <HAL_SPI_TransmitReceive+0x1d4>
 8000fde:	f1b9 0f00 	cmp.w	r9, #0
 8000fe2:	f000 80c0 	beq.w	8001166 <HAL_SPI_TransmitReceive+0x1d4>
 8000fe6:	2e00      	cmp	r6, #0
 8000fe8:	f000 80bd 	beq.w	8001166 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000fec:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000ff0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000ff4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000ff6:	bf1c      	itt	ne
 8000ff8:	2305      	movne	r3, #5
 8000ffa:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001002:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001004:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001006:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001008:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800100a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800100c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800100e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001010:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001012:	bf58      	it	pl
 8001014:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001016:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001018:	bf58      	it	pl
 800101a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800101e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001020:	bf58      	it	pl
 8001022:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001024:	68e2      	ldr	r2, [r4, #12]
 8001026:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800102a:	d158      	bne.n	80010de <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800102c:	b109      	cbz	r1, 8001032 <HAL_SPI_TransmitReceive+0xa0>
 800102e:	2e01      	cmp	r6, #1
 8001030:	d107      	bne.n	8001042 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001032:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001036:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001038:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800103a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800103c:	3b01      	subs	r3, #1
 800103e:	b29b      	uxth	r3, r3
 8001040:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001042:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001044:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001046:	b29b      	uxth	r3, r3
 8001048:	b9ab      	cbnz	r3, 8001076 <HAL_SPI_TransmitReceive+0xe4>
 800104a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800104c:	b29b      	uxth	r3, r3
 800104e:	b993      	cbnz	r3, 8001076 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001050:	4642      	mov	r2, r8
 8001052:	4639      	mov	r1, r7
 8001054:	4620      	mov	r0, r4
 8001056:	f7ff ff54 	bl	8000f02 <SPI_EndRxTxTransaction>
 800105a:	2800      	cmp	r0, #0
 800105c:	f040 8081 	bne.w	8001162 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001060:	68a3      	ldr	r3, [r4, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d132      	bne.n	80010cc <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	9001      	str	r0, [sp, #4]
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	9201      	str	r2, [sp, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	9b01      	ldr	r3, [sp, #4]
 8001074:	e02a      	b.n	80010cc <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	6893      	ldr	r3, [r2, #8]
 800107a:	0799      	lsls	r1, r3, #30
 800107c:	d50d      	bpl.n	800109a <HAL_SPI_TransmitReceive+0x108>
 800107e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001080:	b29b      	uxth	r3, r3
 8001082:	b153      	cbz	r3, 800109a <HAL_SPI_TransmitReceive+0x108>
 8001084:	b14d      	cbz	r5, 800109a <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001086:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001088:	f833 1b02 	ldrh.w	r1, [r3], #2
 800108c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800108e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001090:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001092:	3b01      	subs	r3, #1
 8001094:	b29b      	uxth	r3, r3
 8001096:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001098:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800109a:	6893      	ldr	r3, [r2, #8]
 800109c:	07db      	lsls	r3, r3, #31
 800109e:	d50c      	bpl.n	80010ba <HAL_SPI_TransmitReceive+0x128>
 80010a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	b14b      	cbz	r3, 80010ba <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80010a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010a8:	68d2      	ldr	r2, [r2, #12]
 80010aa:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80010ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80010b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010b2:	3b01      	subs	r3, #1
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80010b8:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80010ba:	f7ff fabb 	bl	8000634 <HAL_GetTick>
 80010be:	eba0 0008 	sub.w	r0, r0, r8
 80010c2:	4287      	cmp	r7, r0
 80010c4:	d8be      	bhi.n	8001044 <HAL_SPI_TransmitReceive+0xb2>
 80010c6:	1c7e      	adds	r6, r7, #1
 80010c8:	d0bc      	beq.n	8001044 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 80010ca:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80010d2:	2300      	movs	r3, #0
 80010d4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80010d8:	b003      	add	sp, #12
 80010da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80010de:	b109      	cbz	r1, 80010e4 <HAL_SPI_TransmitReceive+0x152>
 80010e0:	2e01      	cmp	r6, #1
 80010e2:	d108      	bne.n	80010f6 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80010e4:	782a      	ldrb	r2, [r5, #0]
 80010e6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80010e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010ea:	3301      	adds	r3, #1
 80010ec:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80010ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010f0:	3b01      	subs	r3, #1
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80010f6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b91b      	cbnz	r3, 8001106 <HAL_SPI_TransmitReceive+0x174>
 80010fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001100:	b29b      	uxth	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0a4      	beq.n	8001050 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001106:	6822      	ldr	r2, [r4, #0]
 8001108:	6893      	ldr	r3, [r2, #8]
 800110a:	0798      	lsls	r0, r3, #30
 800110c:	d50e      	bpl.n	800112c <HAL_SPI_TransmitReceive+0x19a>
 800110e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001110:	b29b      	uxth	r3, r3
 8001112:	b15b      	cbz	r3, 800112c <HAL_SPI_TransmitReceive+0x19a>
 8001114:	b155      	cbz	r5, 800112c <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001116:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800111c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800111e:	3301      	adds	r3, #1
 8001120:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001122:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001124:	3b01      	subs	r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800112a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800112c:	6822      	ldr	r2, [r4, #0]
 800112e:	6893      	ldr	r3, [r2, #8]
 8001130:	07d9      	lsls	r1, r3, #31
 8001132:	d50d      	bpl.n	8001150 <HAL_SPI_TransmitReceive+0x1be>
 8001134:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001136:	b29b      	uxth	r3, r3
 8001138:	b153      	cbz	r3, 8001150 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800113a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800113c:	68d2      	ldr	r2, [r2, #12]
 800113e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001140:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001142:	3301      	adds	r3, #1
 8001144:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001146:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001148:	3b01      	subs	r3, #1
 800114a:	b29b      	uxth	r3, r3
 800114c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800114e:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001150:	f7ff fa70 	bl	8000634 <HAL_GetTick>
 8001154:	eba0 0008 	sub.w	r0, r0, r8
 8001158:	4287      	cmp	r7, r0
 800115a:	d8cd      	bhi.n	80010f8 <HAL_SPI_TransmitReceive+0x166>
 800115c:	1c7b      	adds	r3, r7, #1
 800115e:	d0cb      	beq.n	80010f8 <HAL_SPI_TransmitReceive+0x166>
 8001160:	e7b3      	b.n	80010ca <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001162:	2320      	movs	r3, #32
 8001164:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001166:	2001      	movs	r0, #1
 8001168:	e7b0      	b.n	80010cc <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 800116a:	2002      	movs	r0, #2
 800116c:	e7ae      	b.n	80010cc <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800116e:	2002      	movs	r0, #2
 8001170:	e7b2      	b.n	80010d8 <HAL_SPI_TransmitReceive+0x146>

08001172 <HAL_SPI_ErrorCallback>:
 8001172:	4770      	bx	lr

08001174 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8001174:	6803      	ldr	r3, [r0, #0]
{
 8001176:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8001178:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800117a:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800117c:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8001180:	2d01      	cmp	r5, #1
{
 8001182:	b085      	sub	sp, #20
 8001184:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001186:	d105      	bne.n	8001194 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001188:	064d      	lsls	r5, r1, #25
 800118a:	d503      	bpl.n	8001194 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 800118c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 800118e:	4798      	blx	r3
}
 8001190:	b005      	add	sp, #20
 8001192:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001194:	0795      	lsls	r5, r2, #30
 8001196:	d504      	bpl.n	80011a2 <HAL_SPI_IRQHandler+0x2e>
 8001198:	0608      	lsls	r0, r1, #24
 800119a:	d502      	bpl.n	80011a2 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 800119c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800119e:	4620      	mov	r0, r4
 80011a0:	e7f5      	b.n	800118e <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80011a2:	f412 7fb0 	tst.w	r2, #352	; 0x160
 80011a6:	d0f3      	beq.n	8001190 <HAL_SPI_IRQHandler+0x1c>
 80011a8:	068d      	lsls	r5, r1, #26
 80011aa:	d5f1      	bpl.n	8001190 <HAL_SPI_IRQHandler+0x1c>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80011ac:	0650      	lsls	r0, r2, #25
 80011ae:	d50f      	bpl.n	80011d0 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80011b0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80011b4:	2803      	cmp	r0, #3
 80011b6:	f04f 0500 	mov.w	r5, #0
 80011ba:	d04c      	beq.n	8001256 <HAL_SPI_IRQHandler+0xe2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80011bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011be:	f040 0004 	orr.w	r0, r0, #4
 80011c2:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011c4:	9500      	str	r5, [sp, #0]
 80011c6:	68d8      	ldr	r0, [r3, #12]
 80011c8:	9000      	str	r0, [sp, #0]
 80011ca:	6898      	ldr	r0, [r3, #8]
 80011cc:	9000      	str	r0, [sp, #0]
 80011ce:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80011d0:	0695      	lsls	r5, r2, #26
 80011d2:	d50c      	bpl.n	80011ee <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80011d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011d6:	f040 0001 	orr.w	r0, r0, #1
 80011da:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80011dc:	2000      	movs	r0, #0
 80011de:	9002      	str	r0, [sp, #8]
 80011e0:	6898      	ldr	r0, [r3, #8]
 80011e2:	9002      	str	r0, [sp, #8]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80011ea:	6018      	str	r0, [r3, #0]
 80011ec:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80011ee:	05d0      	lsls	r0, r2, #23
 80011f0:	d508      	bpl.n	8001204 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80011f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80011f4:	f042 0208 	orr.w	r2, r2, #8
 80011f8:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80011fa:	2200      	movs	r2, #0
 80011fc:	9203      	str	r2, [sp, #12]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	9203      	str	r2, [sp, #12]
 8001202:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001204:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001206:	2a00      	cmp	r2, #0
 8001208:	d0c2      	beq.n	8001190 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001210:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001212:	2201      	movs	r2, #1
 8001214:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001218:	078a      	lsls	r2, r1, #30
 800121a:	d023      	beq.n	8001264 <HAL_SPI_IRQHandler+0xf0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800121c:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800121e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001220:	f022 0203 	bic.w	r2, r2, #3
 8001224:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001226:	b140      	cbz	r0, 800123a <HAL_SPI_IRQHandler+0xc6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_SPI_IRQHandler+0xf8>)
 800122a:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800122c:	f7ff fa86 	bl	800073c <HAL_DMA_Abort_IT>
 8001230:	b118      	cbz	r0, 800123a <HAL_SPI_IRQHandler+0xc6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001232:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001238:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800123a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800123c:	2800      	cmp	r0, #0
 800123e:	d0a7      	beq.n	8001190 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_SPI_IRQHandler+0xf8>)
 8001242:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001244:	f7ff fa7a 	bl	800073c <HAL_DMA_Abort_IT>
 8001248:	2800      	cmp	r0, #0
 800124a:	d0a1      	beq.n	8001190 <HAL_SPI_IRQHandler+0x1c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800124c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800124e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001252:	6563      	str	r3, [r4, #84]	; 0x54
 8001254:	e79c      	b.n	8001190 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001256:	9501      	str	r5, [sp, #4]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	9201      	str	r2, [sp, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	9b01      	ldr	r3, [sp, #4]
        return;
 8001262:	e795      	b.n	8001190 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8001264:	4620      	mov	r0, r4
 8001266:	f7ff ff84 	bl	8001172 <HAL_SPI_ErrorCallback>
 800126a:	e791      	b.n	8001190 <HAL_SPI_IRQHandler+0x1c>
 800126c:	08001271 	.word	0x08001271

08001270 <SPI_DMAAbortOnError>:
{
 8001270:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001272:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001278:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800127a:	f7ff ff7a 	bl	8001172 <HAL_SPI_ErrorCallback>
 800127e:	bd08      	pop	{r3, pc}

08001280 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001280:	6803      	ldr	r3, [r0, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001288:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001292:	2320      	movs	r3, #32
 8001294:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001298:	4770      	bx	lr
	...

0800129c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800129c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012a0:	6806      	ldr	r6, [r0, #0]
 80012a2:	68c2      	ldr	r2, [r0, #12]
 80012a4:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012a6:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ac:	4313      	orrs	r3, r2
 80012ae:	6133      	str	r3, [r6, #16]
{
 80012b0:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012b2:	6883      	ldr	r3, [r0, #8]
 80012b4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80012b6:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012b8:	4303      	orrs	r3, r0
 80012ba:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80012bc:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012c0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80012c2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012c6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012cc:	6973      	ldr	r3, [r6, #20]
 80012ce:	69a2      	ldr	r2, [r4, #24]
 80012d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012d4:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012d6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012da:	6173      	str	r3, [r6, #20]
 80012dc:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012de:	d17c      	bne.n	80013da <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80012e0:	429e      	cmp	r6, r3
 80012e2:	d003      	beq.n	80012ec <UART_SetConfig+0x50>
 80012e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012e8:	429e      	cmp	r6, r3
 80012ea:	d144      	bne.n	8001376 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80012ec:	f7ff fdc0 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
 80012f0:	2519      	movs	r5, #25
 80012f2:	fb05 f300 	mul.w	r3, r5, r0
 80012f6:	6860      	ldr	r0, [r4, #4]
 80012f8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80012fc:	0040      	lsls	r0, r0, #1
 80012fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8001302:	fbb3 f3f9 	udiv	r3, r3, r9
 8001306:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800130a:	f7ff fdb1 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
 800130e:	6863      	ldr	r3, [r4, #4]
 8001310:	4368      	muls	r0, r5
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fbb0 f7f3 	udiv	r7, r0, r3
 8001318:	f7ff fdaa 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
 800131c:	6863      	ldr	r3, [r4, #4]
 800131e:	4368      	muls	r0, r5
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fbb0 f3f3 	udiv	r3, r0, r3
 8001326:	fbb3 f3f9 	udiv	r3, r3, r9
 800132a:	fb09 7313 	mls	r3, r9, r3, r7
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	3332      	adds	r3, #50	; 0x32
 8001332:	fbb3 f3f9 	udiv	r3, r3, r9
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800133c:	f7ff fd98 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
 8001340:	6862      	ldr	r2, [r4, #4]
 8001342:	4368      	muls	r0, r5
 8001344:	0052      	lsls	r2, r2, #1
 8001346:	fbb0 faf2 	udiv	sl, r0, r2
 800134a:	f7ff fd91 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800134e:	6863      	ldr	r3, [r4, #4]
 8001350:	4368      	muls	r0, r5
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fbb0 f3f3 	udiv	r3, r0, r3
 8001358:	fbb3 f3f9 	udiv	r3, r3, r9
 800135c:	fb09 a313 	mls	r3, r9, r3, sl
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	3332      	adds	r3, #50	; 0x32
 8001364:	fbb3 f3f9 	udiv	r3, r3, r9
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800136e:	443b      	add	r3, r7
 8001370:	60b3      	str	r3, [r6, #8]
 8001372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001376:	f7ff fd6b 	bl	8000e50 <HAL_RCC_GetPCLK1Freq>
 800137a:	2519      	movs	r5, #25
 800137c:	fb05 f300 	mul.w	r3, r5, r0
 8001380:	6860      	ldr	r0, [r4, #4]
 8001382:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001386:	0040      	lsls	r0, r0, #1
 8001388:	fbb3 f3f0 	udiv	r3, r3, r0
 800138c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001390:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001394:	f7ff fd5c 	bl	8000e50 <HAL_RCC_GetPCLK1Freq>
 8001398:	6863      	ldr	r3, [r4, #4]
 800139a:	4368      	muls	r0, r5
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fbb0 f7f3 	udiv	r7, r0, r3
 80013a2:	f7ff fd55 	bl	8000e50 <HAL_RCC_GetPCLK1Freq>
 80013a6:	6863      	ldr	r3, [r4, #4]
 80013a8:	4368      	muls	r0, r5
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80013b4:	fb09 7313 	mls	r3, r9, r3, r7
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	3332      	adds	r3, #50	; 0x32
 80013bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80013c6:	f7ff fd43 	bl	8000e50 <HAL_RCC_GetPCLK1Freq>
 80013ca:	6862      	ldr	r2, [r4, #4]
 80013cc:	4368      	muls	r0, r5
 80013ce:	0052      	lsls	r2, r2, #1
 80013d0:	fbb0 faf2 	udiv	sl, r0, r2
 80013d4:	f7ff fd3c 	bl	8000e50 <HAL_RCC_GetPCLK1Freq>
 80013d8:	e7b9      	b.n	800134e <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80013da:	429e      	cmp	r6, r3
 80013dc:	d002      	beq.n	80013e4 <UART_SetConfig+0x148>
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <UART_SetConfig+0x230>)
 80013e0:	429e      	cmp	r6, r3
 80013e2:	d140      	bne.n	8001466 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80013e4:	f7ff fd44 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
 80013e8:	6867      	ldr	r7, [r4, #4]
 80013ea:	2519      	movs	r5, #25
 80013ec:	f04f 0964 	mov.w	r9, #100	; 0x64
 80013f0:	fb05 f300 	mul.w	r3, r5, r0
 80013f4:	00bf      	lsls	r7, r7, #2
 80013f6:	fbb3 f3f7 	udiv	r3, r3, r7
 80013fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80013fe:	011f      	lsls	r7, r3, #4
 8001400:	f7ff fd36 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
 8001404:	6863      	ldr	r3, [r4, #4]
 8001406:	4368      	muls	r0, r5
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	fbb0 f8f3 	udiv	r8, r0, r3
 800140e:	f7ff fd2f 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
 8001412:	6863      	ldr	r3, [r4, #4]
 8001414:	4368      	muls	r0, r5
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fbb0 f3f3 	udiv	r3, r0, r3
 800141c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001420:	fb09 8313 	mls	r3, r9, r3, r8
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	3332      	adds	r3, #50	; 0x32
 8001428:	fbb3 f3f9 	udiv	r3, r3, r9
 800142c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001430:	f7ff fd1e 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
 8001434:	6862      	ldr	r2, [r4, #4]
 8001436:	4368      	muls	r0, r5
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	fbb0 faf2 	udiv	sl, r0, r2
 800143e:	f7ff fd17 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001442:	6863      	ldr	r3, [r4, #4]
 8001444:	4368      	muls	r0, r5
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	fbb0 f3f3 	udiv	r3, r0, r3
 800144c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001450:	fb09 a313 	mls	r3, r9, r3, sl
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	3332      	adds	r3, #50	; 0x32
 8001458:	fbb3 f3f9 	udiv	r3, r3, r9
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	ea43 0308 	orr.w	r3, r3, r8
 8001464:	e783      	b.n	800136e <UART_SetConfig+0xd2>
 8001466:	f7ff fcf3 	bl	8000e50 <HAL_RCC_GetPCLK1Freq>
 800146a:	6867      	ldr	r7, [r4, #4]
 800146c:	2519      	movs	r5, #25
 800146e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001472:	fb05 f300 	mul.w	r3, r5, r0
 8001476:	00bf      	lsls	r7, r7, #2
 8001478:	fbb3 f3f7 	udiv	r3, r3, r7
 800147c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001480:	011f      	lsls	r7, r3, #4
 8001482:	f7ff fce5 	bl	8000e50 <HAL_RCC_GetPCLK1Freq>
 8001486:	6863      	ldr	r3, [r4, #4]
 8001488:	4368      	muls	r0, r5
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001490:	f7ff fcde 	bl	8000e50 <HAL_RCC_GetPCLK1Freq>
 8001494:	6863      	ldr	r3, [r4, #4]
 8001496:	4368      	muls	r0, r5
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	fbb3 f3f9 	udiv	r3, r3, r9
 80014a2:	fb09 8313 	mls	r3, r9, r3, r8
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	3332      	adds	r3, #50	; 0x32
 80014aa:	fbb3 f3f9 	udiv	r3, r3, r9
 80014ae:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80014b2:	f7ff fccd 	bl	8000e50 <HAL_RCC_GetPCLK1Freq>
 80014b6:	6862      	ldr	r2, [r4, #4]
 80014b8:	4368      	muls	r0, r5
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	fbb0 faf2 	udiv	sl, r0, r2
 80014c0:	f7ff fcc6 	bl	8000e50 <HAL_RCC_GetPCLK1Freq>
 80014c4:	e7bd      	b.n	8001442 <UART_SetConfig+0x1a6>
 80014c6:	bf00      	nop
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40011400 	.word	0x40011400

080014d0 <HAL_UART_Init>:
{
 80014d0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80014d2:	4604      	mov	r4, r0
 80014d4:	b340      	cbz	r0, 8001528 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80014d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80014da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014de:	b91b      	cbnz	r3, 80014e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80014e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80014e4:	f000 fd92 	bl	800200c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80014e8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80014ea:	2324      	movs	r3, #36	; 0x24
 80014ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80014f0:	68d3      	ldr	r3, [r2, #12]
 80014f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014f6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80014f8:	4620      	mov	r0, r4
 80014fa:	f7ff fecf 	bl	800129c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001506:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800150e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001516:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001518:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800151a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800151c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800151e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001522:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001526:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001528:	2001      	movs	r0, #1
}
 800152a:	bd10      	pop	{r4, pc}

0800152c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800152c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001530:	2b20      	cmp	r3, #32
 8001532:	d118      	bne.n	8001566 <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8001534:	b1a9      	cbz	r1, 8001562 <HAL_UART_Transmit_IT+0x36>
 8001536:	b1a2      	cbz	r2, 8001562 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8001538:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800153c:	2b01      	cmp	r3, #1
 800153e:	d012      	beq.n	8001566 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001540:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 8001542:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001544:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001546:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001548:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800154c:	2221      	movs	r2, #33	; 0x21
 800154e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001552:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8001554:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001558:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800155c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800155e:	4618      	mov	r0, r3
 8001560:	4770      	bx	lr
      return HAL_ERROR;
 8001562:	2001      	movs	r0, #1
 8001564:	4770      	bx	lr
    return HAL_BUSY;
 8001566:	2002      	movs	r0, #2
}
 8001568:	4770      	bx	lr

0800156a <HAL_UART_TxCpltCallback>:
 800156a:	4770      	bx	lr

0800156c <HAL_UART_RxCpltCallback>:
 800156c:	4770      	bx	lr

0800156e <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800156e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001572:	2b22      	cmp	r3, #34	; 0x22
{
 8001574:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001576:	d136      	bne.n	80015e6 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001578:	6883      	ldr	r3, [r0, #8]
 800157a:	6901      	ldr	r1, [r0, #16]
 800157c:	6802      	ldr	r2, [r0, #0]
 800157e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001582:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001584:	d123      	bne.n	80015ce <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001586:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001588:	b9e9      	cbnz	r1, 80015c6 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800158a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800158e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001592:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001594:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001596:	3c01      	subs	r4, #1
 8001598:	b2a4      	uxth	r4, r4
 800159a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800159c:	b98c      	cbnz	r4, 80015c2 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800159e:	6803      	ldr	r3, [r0, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	f022 0220 	bic.w	r2, r2, #32
 80015a6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ae:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80015b8:	2320      	movs	r3, #32
 80015ba:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80015be:	f7ff ffd5 	bl	800156c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80015c2:	2000      	movs	r0, #0
}
 80015c4:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	f823 2b01 	strh.w	r2, [r3], #1
 80015cc:	e7e1      	b.n	8001592 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80015ce:	b921      	cbnz	r1, 80015da <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	6852      	ldr	r2, [r2, #4]
 80015d4:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e7dc      	b.n	8001594 <UART_Receive_IT+0x26>
 80015da:	6852      	ldr	r2, [r2, #4]
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	6281      	str	r1, [r0, #40]	; 0x28
 80015e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015e4:	e7f7      	b.n	80015d6 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80015e6:	2002      	movs	r0, #2
 80015e8:	bd10      	pop	{r4, pc}

080015ea <HAL_UART_ErrorCallback>:
 80015ea:	4770      	bx	lr

080015ec <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80015ec:	6803      	ldr	r3, [r0, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80015f0:	68d9      	ldr	r1, [r3, #12]
{
 80015f2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80015f4:	0716      	lsls	r6, r2, #28
{
 80015f6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80015f8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80015fa:	d107      	bne.n	800160c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015fc:	0696      	lsls	r6, r2, #26
 80015fe:	d55a      	bpl.n	80016b6 <HAL_UART_IRQHandler+0xca>
 8001600:	068d      	lsls	r5, r1, #26
 8001602:	d558      	bpl.n	80016b6 <HAL_UART_IRQHandler+0xca>
}
 8001604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001608:	f7ff bfb1 	b.w	800156e <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800160c:	f015 0501 	ands.w	r5, r5, #1
 8001610:	d102      	bne.n	8001618 <HAL_UART_IRQHandler+0x2c>
 8001612:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001616:	d04e      	beq.n	80016b6 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001618:	07d3      	lsls	r3, r2, #31
 800161a:	d505      	bpl.n	8001628 <HAL_UART_IRQHandler+0x3c>
 800161c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800161e:	bf42      	ittt	mi
 8001620:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001622:	f043 0301 	orrmi.w	r3, r3, #1
 8001626:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001628:	0750      	lsls	r0, r2, #29
 800162a:	d504      	bpl.n	8001636 <HAL_UART_IRQHandler+0x4a>
 800162c:	b11d      	cbz	r5, 8001636 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800162e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001636:	0793      	lsls	r3, r2, #30
 8001638:	d504      	bpl.n	8001644 <HAL_UART_IRQHandler+0x58>
 800163a:	b11d      	cbz	r5, 8001644 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800163c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001644:	0716      	lsls	r6, r2, #28
 8001646:	d504      	bpl.n	8001652 <HAL_UART_IRQHandler+0x66>
 8001648:	b11d      	cbz	r5, 8001652 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800164a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001652:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d066      	beq.n	8001726 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001658:	0695      	lsls	r5, r2, #26
 800165a:	d504      	bpl.n	8001666 <HAL_UART_IRQHandler+0x7a>
 800165c:	0688      	lsls	r0, r1, #26
 800165e:	d502      	bpl.n	8001666 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001660:	4620      	mov	r0, r4
 8001662:	f7ff ff84 	bl	800156e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800166a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800166c:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800166e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001670:	d402      	bmi.n	8001678 <HAL_UART_IRQHandler+0x8c>
 8001672:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001676:	d01a      	beq.n	80016ae <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001678:	f7ff fe02 	bl	8001280 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	0652      	lsls	r2, r2, #25
 8001682:	d510      	bpl.n	80016a6 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001684:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001686:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800168c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800168e:	b150      	cbz	r0, 80016a6 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_UART_IRQHandler+0x13c>)
 8001692:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001694:	f7ff f852 	bl	800073c <HAL_DMA_Abort_IT>
 8001698:	2800      	cmp	r0, #0
 800169a:	d044      	beq.n	8001726 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800169c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800169e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80016a2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80016a4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff ff9f 	bl	80015ea <HAL_UART_ErrorCallback>
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80016ae:	f7ff ff9c 	bl	80015ea <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016b2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80016b4:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80016b6:	0616      	lsls	r6, r2, #24
 80016b8:	d527      	bpl.n	800170a <HAL_UART_IRQHandler+0x11e>
 80016ba:	060d      	lsls	r5, r1, #24
 80016bc:	d525      	bpl.n	800170a <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80016be:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80016c2:	2a21      	cmp	r2, #33	; 0x21
 80016c4:	d12f      	bne.n	8001726 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016c6:	68a2      	ldr	r2, [r4, #8]
 80016c8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80016cc:	6a22      	ldr	r2, [r4, #32]
 80016ce:	d117      	bne.n	8001700 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80016d0:	8811      	ldrh	r1, [r2, #0]
 80016d2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80016d6:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80016d8:	6921      	ldr	r1, [r4, #16]
 80016da:	b979      	cbnz	r1, 80016fc <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80016dc:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80016de:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80016e0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80016e2:	3a01      	subs	r2, #1
 80016e4:	b292      	uxth	r2, r2
 80016e6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80016e8:	b9ea      	cbnz	r2, 8001726 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80016fc:	3201      	adds	r2, #1
 80016fe:	e7ee      	b.n	80016de <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001700:	1c51      	adds	r1, r2, #1
 8001702:	6221      	str	r1, [r4, #32]
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	e7ea      	b.n	80016e0 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800170a:	0650      	lsls	r0, r2, #25
 800170c:	d50b      	bpl.n	8001726 <HAL_UART_IRQHandler+0x13a>
 800170e:	064a      	lsls	r2, r1, #25
 8001710:	d509      	bpl.n	8001726 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001718:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800171a:	2320      	movs	r3, #32
 800171c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001720:	4620      	mov	r0, r4
 8001722:	f7ff ff22 	bl	800156a <HAL_UART_TxCpltCallback>
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	0800172d 	.word	0x0800172d

0800172c <UART_DMAAbortOnError>:
{
 800172c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800172e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001734:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001736:	f7ff ff58 	bl	80015ea <HAL_UART_ErrorCallback>
 800173a:	bd08      	pop	{r3, pc}

0800173c <MFRC522_CS_RESET>:
SPI_HandleTypeDef hspi1; /* extern hspi1 is in spi.h file */


void MFRC522_CS_RESET()
{
	HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	2110      	movs	r1, #16
 8001740:	4801      	ldr	r0, [pc, #4]	; (8001748 <MFRC522_CS_RESET+0xc>)
 8001742:	f7ff b8f9 	b.w	8000938 <HAL_GPIO_WritePin>
 8001746:	bf00      	nop
 8001748:	40020000 	.word	0x40020000

0800174c <MFRC522_CS_SET>:
}

void MFRC522_CS_SET()
{
	HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	2110      	movs	r1, #16
 8001750:	4801      	ldr	r0, [pc, #4]	; (8001758 <MFRC522_CS_SET+0xc>)
 8001752:	f7ff b8f1 	b.w	8000938 <HAL_GPIO_WritePin>
 8001756:	bf00      	nop
 8001758:	40020000 	.word	0x40020000

0800175c <SPI1SendByte>:
}

uint8_t SPI1SendByte(uint8_t data)
{
 800175c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &writeCommand,
 800175e:	230a      	movs	r3, #10
	writeCommand[0] = data;
 8001760:	f88d 0008 	strb.w	r0, [sp, #8]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &writeCommand,
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	aa03      	add	r2, sp, #12
 8001768:	2301      	movs	r3, #1
 800176a:	a902      	add	r1, sp, #8
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <SPI1SendByte+0x20>)
 800176e:	f7ff fc10 	bl	8000f92 <HAL_SPI_TransmitReceive>
			(uint8_t*) &readValue, 1, 10);
	return readValue[0];
}
 8001772:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001776:	b005      	add	sp, #20
 8001778:	f85d fb04 	ldr.w	pc, [sp], #4
 800177c:	200000c0 	.word	0x200000c0

08001780 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value)
{
 8001780:	b538      	push	{r3, r4, r5, lr}
 8001782:	4605      	mov	r5, r0
 8001784:	460c      	mov	r4, r1
	MFRC522_CS_RESET();
 8001786:	f7ff ffd9 	bl	800173c <MFRC522_CS_RESET>
	SPI1SendByte(address);
 800178a:	4628      	mov	r0, r5
 800178c:	f7ff ffe6 	bl	800175c <SPI1SendByte>
	SPI1SendByte(value);
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff ffe3 	bl	800175c <SPI1SendByte>
	MFRC522_CS_SET();
}
 8001796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_CS_SET();
 800179a:	f7ff bfd7 	b.w	800174c <MFRC522_CS_SET>

0800179e <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address)
{
 800179e:	b510      	push	{r4, lr}
 80017a0:	4604      	mov	r4, r0
	uint8_t val;

	MFRC522_CS_RESET();
 80017a2:	f7ff ffcb 	bl	800173c <MFRC522_CS_RESET>
	SPI1SendByte(address);
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7ff ffd8 	bl	800175c <SPI1SendByte>
	val = SPI1SendByte(0x00);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ffd5 	bl	800175c <SPI1SendByte>
 80017b2:	4604      	mov	r4, r0
	MFRC522_CS_SET();
 80017b4:	f7ff ffca 	bl	800174c <MFRC522_CS_SET>
	return val;
}
 80017b8:	4620      	mov	r0, r4
 80017ba:	bd10      	pop	{r4, pc}

080017bc <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val)
{
	addr = (addr << 1) & 0x7E;						// Address format: 0XXXXXX0
 80017bc:	0040      	lsls	r0, r0, #1
	SPI1_WriteReg(addr, val);
 80017be:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 80017c2:	f7ff bfdd 	b.w	8001780 <SPI1_WriteReg>

080017c6 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr)
{
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 80017c6:	0040      	lsls	r0, r0, #1
 80017c8:	f000 007e 	and.w	r0, r0, #126	; 0x7e
	val = SPI1_ReadReg(addr);
 80017cc:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80017d0:	f7ff bfe5 	b.w	800179e <SPI1_ReadReg>

080017d4 <MFRC522_SetBitMask>:
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask)
{
 80017d4:	b538      	push	{r3, r4, r5, lr}
 80017d6:	4605      	mov	r5, r0
 80017d8:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80017da:	f7ff fff4 	bl	80017c6 <MFRC522_ReadRegister>
 80017de:	ea40 0104 	orr.w	r1, r0, r4
 80017e2:	b2c9      	uxtb	r1, r1
 80017e4:	4628      	mov	r0, r5
}
 80017e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80017ea:	f7ff bfe7 	b.w	80017bc <MFRC522_WriteRegister>

080017ee <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask)
{
 80017ee:	b538      	push	{r3, r4, r5, lr}
 80017f0:	4605      	mov	r5, r0
 80017f2:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 80017f4:	f7ff ffe7 	bl	80017c6 <MFRC522_ReadRegister>
 80017f8:	ea20 0104 	bic.w	r1, r0, r4
 80017fc:	b2c9      	uxtb	r1, r1
 80017fe:	4628      	mov	r0, r5
}
 8001800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001804:	f7ff bfda 	b.w	80017bc <MFRC522_WriteRegister>

08001808 <MFRC522_ToCard>:
	return status;
}

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen,
		uint8_t* backData, uint16_t* backLen)
{
 8001808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command)
 800180c:	280c      	cmp	r0, #12
{
 800180e:	4681      	mov	r9, r0
 8001810:	460f      	mov	r7, r1
 8001812:	4692      	mov	sl, r2
 8001814:	461e      	mov	r6, r3
 8001816:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	switch (command)
 800181a:	d03e      	beq.n	800189a <MFRC522_ToCard+0x92>
 800181c:	280e      	cmp	r0, #14
 800181e:	d03f      	beq.n	80018a0 <MFRC522_ToCard+0x98>
	uint8_t waitIRq = 0x00;
 8001820:	2500      	movs	r5, #0
	uint8_t irqEn = 0x00;
 8001822:	462c      	mov	r4, r5
	SPI1_WriteReg(addr, val);
 8001824:	f044 0180 	orr.w	r1, r4, #128	; 0x80
 8001828:	2004      	movs	r0, #4
 800182a:	f7ff ffa9 	bl	8001780 <SPI1_WriteReg>
	default:
		break;
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	2004      	movs	r0, #4
 8001832:	f7ff ffdc 	bl	80017ee <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	200a      	movs	r0, #10
 800183a:	f7ff ffcb 	bl	80017d4 <MFRC522_SetBitMask>
	SPI1_WriteReg(addr, val);
 800183e:	2100      	movs	r1, #0
 8001840:	2002      	movs	r0, #2
 8001842:	f7ff ff9d 	bl	8001780 <SPI1_WriteReg>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++)
 8001846:	46bb      	mov	fp, r7
 8001848:	fa1f fa8a 	uxth.w	sl, sl
 800184c:	ebab 0307 	sub.w	r3, fp, r7
 8001850:	b29b      	uxth	r3, r3
 8001852:	459a      	cmp	sl, r3
 8001854:	d827      	bhi.n	80018a6 <MFRC522_ToCard+0x9e>
	SPI1_WriteReg(addr, val);
 8001856:	4649      	mov	r1, r9
 8001858:	2002      	movs	r0, #2
 800185a:	f7ff ff91 	bl	8001780 <SPI1_WriteReg>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
	if (command == PCD_TRANSCEIVE)
 800185e:	f1b9 0f0c 	cmp.w	r9, #12
 8001862:	d103      	bne.n	800186c <MFRC522_ToCard+0x64>
		MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);	// StartSend=1,transmission of data starts
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	200d      	movs	r0, #13
 8001868:	f7ff ffb4 	bl	80017d4 <MFRC522_SetBitMask>
	for (i = 0; i < sendLen; i++)
 800186c:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	{
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
		i--;
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8001870:	f045 0a01 	orr.w	sl, r5, #1
	val = SPI1_ReadReg(addr);
 8001874:	2088      	movs	r0, #136	; 0x88
 8001876:	f7ff ff92 	bl	800179e <SPI1_ReadReg>
		i--;
 800187a:	3f01      	subs	r7, #1
 800187c:	b2bf      	uxth	r7, r7
	val = SPI1_ReadReg(addr);
 800187e:	4605      	mov	r5, r0
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8001880:	b117      	cbz	r7, 8001888 <MFRC522_ToCard+0x80>
 8001882:	ea10 0f0a 	tst.w	r0, sl
 8001886:	d0f5      	beq.n	8001874 <MFRC522_ToCard+0x6c>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);						// StartSend=0
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	200d      	movs	r0, #13
 800188c:	f7ff ffaf 	bl	80017ee <MFRC522_ClearBitMask>

	if (i != 0)
 8001890:	b97f      	cbnz	r7, 80018b2 <MFRC522_ToCard+0xaa>
	uint8_t status = MI_ERR;
 8001892:	2502      	movs	r5, #2
		}
		else
			status = MI_ERR;
	}
	return status;
}
 8001894:	4628      	mov	r0, r5
 8001896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		waitIRq = 0x30;
 800189a:	2530      	movs	r5, #48	; 0x30
		irqEn = 0x77;
 800189c:	2477      	movs	r4, #119	; 0x77
		break;
 800189e:	e7c1      	b.n	8001824 <MFRC522_ToCard+0x1c>
		waitIRq = 0x10;
 80018a0:	2510      	movs	r5, #16
		irqEn = 0x12;
 80018a2:	2412      	movs	r4, #18
 80018a4:	e7be      	b.n	8001824 <MFRC522_ToCard+0x1c>
	SPI1_WriteReg(addr, val);
 80018a6:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80018aa:	2012      	movs	r0, #18
 80018ac:	f7ff ff68 	bl	8001780 <SPI1_WriteReg>
 80018b0:	e7cc      	b.n	800184c <MFRC522_ToCard+0x44>
	val = SPI1_ReadReg(addr);
 80018b2:	208c      	movs	r0, #140	; 0x8c
 80018b4:	f7ff ff73 	bl	800179e <SPI1_ReadReg>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B))
 80018b8:	f010 0f1b 	tst.w	r0, #27
 80018bc:	d1e9      	bne.n	8001892 <MFRC522_ToCard+0x8a>
			status = MI_OK;
 80018be:	f004 0401 	and.w	r4, r4, #1
			if (command == PCD_TRANSCEIVE)
 80018c2:	f1b9 0f0c 	cmp.w	r9, #12
			status = MI_OK;
 80018c6:	ea05 0504 	and.w	r5, r5, r4
			if (command == PCD_TRANSCEIVE)
 80018ca:	d1e3      	bne.n	8001894 <MFRC522_ToCard+0x8c>
	val = SPI1_ReadReg(addr);
 80018cc:	2094      	movs	r0, #148	; 0x94
 80018ce:	f7ff ff66 	bl	800179e <SPI1_ReadReg>
 80018d2:	4604      	mov	r4, r0
 80018d4:	2098      	movs	r0, #152	; 0x98
 80018d6:	f7ff ff62 	bl	800179e <SPI1_ReadReg>
				if (lastBits)
 80018da:	f010 0007 	ands.w	r0, r0, #7
					*backLen = (n - 1) * 8 + lastBits;
 80018de:	bf1b      	ittet	ne
 80018e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80018e4:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
					*backLen = n * 8;
 80018e8:	00e3      	lsleq	r3, r4, #3
					*backLen = (n - 1) * 8 + lastBits;
 80018ea:	f8a8 0000 	strhne.w	r0, [r8]
					*backLen = n * 8;
 80018ee:	bf08      	it	eq
 80018f0:	f8a8 3000 	strheq.w	r3, [r8]
				if (n == 0)
 80018f4:	b17c      	cbz	r4, 8001916 <MFRC522_ToCard+0x10e>
 80018f6:	2c10      	cmp	r4, #16
 80018f8:	bf28      	it	cs
 80018fa:	2410      	movcs	r4, #16
 80018fc:	b2e4      	uxtb	r4, r4
				for (i = 0; i < n; i++)
 80018fe:	4637      	mov	r7, r6
 8001900:	b2a4      	uxth	r4, r4
 8001902:	1bbb      	subs	r3, r7, r6
 8001904:	b29b      	uxth	r3, r3
 8001906:	429c      	cmp	r4, r3
 8001908:	d9c4      	bls.n	8001894 <MFRC522_ToCard+0x8c>
	val = SPI1_ReadReg(addr);
 800190a:	2092      	movs	r0, #146	; 0x92
 800190c:	f7ff ff47 	bl	800179e <SPI1_ReadReg>
					backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);	// Reading the received data in FIFO
 8001910:	f807 0b01 	strb.w	r0, [r7], #1
 8001914:	e7f5      	b.n	8001902 <MFRC522_ToCard+0xfa>
					n = 1;
 8001916:	2401      	movs	r4, #1
 8001918:	e7f1      	b.n	80018fe <MFRC522_ToCard+0xf6>

0800191a <MFRC522_Request>:
{
 800191a:	b530      	push	{r4, r5, lr}
 800191c:	460c      	mov	r4, r1
 800191e:	b085      	sub	sp, #20
 8001920:	4605      	mov	r5, r0
	SPI1_WriteReg(addr, val);
 8001922:	2107      	movs	r1, #7
 8001924:	201a      	movs	r0, #26
 8001926:	f7ff ff2b 	bl	8001780 <SPI1_WriteReg>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800192a:	f10d 030e 	add.w	r3, sp, #14
 800192e:	9300      	str	r3, [sp, #0]
	TagType[0] = reqMode;
 8001930:	7025      	strb	r5, [r4, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001932:	4623      	mov	r3, r4
 8001934:	2201      	movs	r2, #1
 8001936:	4621      	mov	r1, r4
 8001938:	200c      	movs	r0, #12
 800193a:	f7ff ff65 	bl	8001808 <MFRC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10))
 800193e:	b930      	cbnz	r0, 800194e <MFRC522_Request+0x34>
 8001940:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001944:	2b10      	cmp	r3, #16
		status = MI_ERR;
 8001946:	bf18      	it	ne
 8001948:	2002      	movne	r0, #2
}
 800194a:	b005      	add	sp, #20
 800194c:	bd30      	pop	{r4, r5, pc}
		status = MI_ERR;
 800194e:	2002      	movs	r0, #2
 8001950:	e7fb      	b.n	800194a <MFRC522_Request+0x30>

08001952 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum)
{
 8001952:	b530      	push	{r4, r5, lr}
	SPI1_WriteReg(addr, val);
 8001954:	2100      	movs	r1, #0
{
 8001956:	4604      	mov	r4, r0
 8001958:	b085      	sub	sp, #20
	SPI1_WriteReg(addr, val);
 800195a:	201a      	movs	r0, #26
 800195c:	f7ff ff10 	bl	8001780 <SPI1_WriteReg>
	uint8_t i;
	uint8_t serNumCheck = 0;
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);	// TxLastBists=BitFramingReg[2..0]
	serNum[0] = PICC_ANTICOLL;
 8001960:	2393      	movs	r3, #147	; 0x93
 8001962:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20;
 8001964:	2320      	movs	r3, #32
 8001966:	7063      	strb	r3, [r4, #1]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001968:	f10d 030e 	add.w	r3, sp, #14
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2202      	movs	r2, #2
 8001970:	4623      	mov	r3, r4
 8001972:	4621      	mov	r1, r4
 8001974:	200c      	movs	r0, #12
 8001976:	f7ff ff47 	bl	8001808 <MFRC522_ToCard>
	if (status == MI_OK)
 800197a:	b960      	cbnz	r0, 8001996 <MFRC522_Anticoll+0x44>
 800197c:	1e62      	subs	r2, r4, #1
 800197e:	1ce1      	adds	r1, r4, #3
 8001980:	4603      	mov	r3, r0
	{
		// Check card serial number
		for (i = 0; i < 4; i++)
			serNumCheck ^= serNum[i];
 8001982:	f812 5f01 	ldrb.w	r5, [r2, #1]!
		for (i = 0; i < 4; i++)
 8001986:	428a      	cmp	r2, r1
			serNumCheck ^= serNum[i];
 8001988:	ea83 0305 	eor.w	r3, r3, r5
		for (i = 0; i < 4; i++)
 800198c:	d1f9      	bne.n	8001982 <MFRC522_Anticoll+0x30>
		if (serNumCheck != serNum[i])
 800198e:	7922      	ldrb	r2, [r4, #4]
			status = MI_ERR;
 8001990:	429a      	cmp	r2, r3
 8001992:	bf18      	it	ne
 8001994:	2002      	movne	r0, #2
	}
	return status;
}
 8001996:	b005      	add	sp, #20
 8001998:	bd30      	pop	{r4, r5, pc}

0800199a <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t* pIndata, uint8_t len, uint8_t* pOutData)
{
 800199a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800199c:	4604      	mov	r4, r0
 800199e:	460e      	mov	r6, r1
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);								// CRCIrq = 0
 80019a0:	2005      	movs	r0, #5
 80019a2:	2104      	movs	r1, #4
{
 80019a4:	4617      	mov	r7, r2
	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);								// CRCIrq = 0
 80019a6:	f7ff ff22 	bl	80017ee <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);		// Clear the FIFO pointer
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	200a      	movs	r0, #10
 80019ae:	f7ff ff11 	bl	80017d4 <MFRC522_SetBitMask>
 80019b2:	3e01      	subs	r6, #1
 80019b4:	1e65      	subs	r5, r4, #1
 80019b6:	4434      	add	r4, r6
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++)
 80019b8:	42a5      	cmp	r5, r4
 80019ba:	d116      	bne.n	80019ea <MFRC522_CalculateCRC+0x50>
	SPI1_WriteReg(addr, val);
 80019bc:	2103      	movs	r1, #3
 80019be:	2002      	movs	r0, #2
 80019c0:	f7ff fede 	bl	8001780 <SPI1_WriteReg>
 80019c4:	24ff      	movs	r4, #255	; 0xff
	val = SPI1_ReadReg(addr);
 80019c6:	208a      	movs	r0, #138	; 0x8a
 80019c8:	3c01      	subs	r4, #1
 80019ca:	f7ff fee8 	bl	800179e <SPI1_ReadReg>
	i = 0xFF;
	do
	{
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
		i--;
	} while ((i != 0) && !(n & 0x04));															// CRCIrq = 1
 80019ce:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80019d2:	d001      	beq.n	80019d8 <MFRC522_CalculateCRC+0x3e>
 80019d4:	0743      	lsls	r3, r0, #29
 80019d6:	d5f6      	bpl.n	80019c6 <MFRC522_CalculateCRC+0x2c>
	val = SPI1_ReadReg(addr);
 80019d8:	20c4      	movs	r0, #196	; 0xc4
 80019da:	f7ff fee0 	bl	800179e <SPI1_ReadReg>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80019de:	7038      	strb	r0, [r7, #0]
	val = SPI1_ReadReg(addr);
 80019e0:	20c2      	movs	r0, #194	; 0xc2
 80019e2:	f7ff fedc 	bl	800179e <SPI1_ReadReg>
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80019e6:	7078      	strb	r0, [r7, #1]
 80019e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SPI1_WriteReg(addr, val);
 80019ea:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80019ee:	2012      	movs	r0, #18
 80019f0:	f7ff fec6 	bl	8001780 <SPI1_WriteReg>
 80019f4:	e7e0      	b.n	80019b8 <MFRC522_CalculateCRC+0x1e>

080019f6 <MFRC522_Halt>:
{
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void)
{
 80019f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80019f8:	2350      	movs	r3, #80	; 0x50
 80019fa:	f88d 300c 	strb.w	r3, [sp, #12]
	buff[1] = 0;
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80019fe:	f10d 020e 	add.w	r2, sp, #14
	buff[1] = 0;
 8001a02:	2300      	movs	r3, #0
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001a04:	a803      	add	r0, sp, #12
 8001a06:	2102      	movs	r1, #2
	buff[1] = 0;
 8001a08:	f88d 300d 	strb.w	r3, [sp, #13]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001a0c:	f7ff ffc5 	bl	800199a <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001a10:	f10d 030a 	add.w	r3, sp, #10
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	ab03      	add	r3, sp, #12
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	200c      	movs	r0, #12
 8001a1e:	f7ff fef3 	bl	8001808 <MFRC522_ToCard>
}
 8001a22:	b005      	add	sp, #20
 8001a24:	f85d fb04 	ldr.w	pc, [sp], #4

08001a28 <MFRC522_Check>:
{
 8001a28:	b538      	push	{r3, r4, r5, lr}
	status = MFRC522_Request(PICC_REQIDL, id);		// Find cards, return card type
 8001a2a:	4601      	mov	r1, r0
{
 8001a2c:	4605      	mov	r5, r0
	status = MFRC522_Request(PICC_REQIDL, id);		// Find cards, return card type
 8001a2e:	2026      	movs	r0, #38	; 0x26
 8001a30:	f7ff ff73 	bl	800191a <MFRC522_Request>
	if (status == MI_OK)
 8001a34:	4604      	mov	r4, r0
 8001a36:	b918      	cbnz	r0, 8001a40 <MFRC522_Check+0x18>
		status = MFRC522_Anticoll(id);  // Card detected. Anti-collision, return card serial number 4 bytes
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f7ff ff8a 	bl	8001952 <MFRC522_Anticoll>
 8001a3e:	4604      	mov	r4, r0
	MFRC522_Halt();																// Command card into hibernation
 8001a40:	f7ff ffd9 	bl	80019f6 <MFRC522_Halt>
}
 8001a44:	4620      	mov	r0, r4
 8001a46:	bd38      	pop	{r3, r4, r5, pc}

08001a48 <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 8001a48:	4770      	bx	lr
	...

08001a4c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4e:	2214      	movs	r2, #20
{
 8001a50:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	eb0d 0002 	add.w	r0, sp, r2
 8001a56:	2100      	movs	r1, #0
 8001a58:	f000 fbae 	bl	80021b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <MX_GPIO_Init+0xa8>)
 8001a60:	9401      	str	r4, [sp, #4]
 8001a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_RESET);
 8001a64:	4f24      	ldr	r7, [pc, #144]	; (8001af8 <MX_GPIO_Init+0xac>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NRF24_CSN_GPIO_Port, SPI_NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001a66:	4d25      	ldr	r5, [pc, #148]	; (8001afc <MX_GPIO_Init+0xb0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a70:	f002 0201 	and.w	r2, r2, #1
 8001a74:	9201      	str	r2, [sp, #4]
 8001a76:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	9402      	str	r4, [sp, #8]
 8001a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a7c:	f042 0202 	orr.w	r2, r2, #2
 8001a80:	631a      	str	r2, [r3, #48]	; 0x30
 8001a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a84:	f002 0202 	and.w	r2, r2, #2
 8001a88:	9202      	str	r2, [sp, #8]
 8001a8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8c:	9403      	str	r4, [sp, #12]
 8001a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a90:	f042 0204 	orr.w	r2, r2, #4
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
 8001a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a98:	f002 0204 	and.w	r2, r2, #4
 8001a9c:	9203      	str	r2, [sp, #12]
 8001a9e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa0:	9404      	str	r4, [sp, #16]
 8001aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa4:	f042 0208 	orr.w	r2, r2, #8
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_RESET);
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	4638      	mov	r0, r7
 8001ab6:	2110      	movs	r1, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_RESET);
 8001aba:	f7fe ff3d 	bl	8000938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_NRF24_CSN_GPIO_Port, SPI_NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001abe:	4622      	mov	r2, r4
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	f7fe ff38 	bl	8000938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RFID_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = SPI_RFID_CS_Pin;
 8001aca:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 8001acc:	a905      	add	r1, sp, #20
 8001ace:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SPI_RFID_CS_Pin;
 8001ad0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SPI_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f7fe fe42 	bl	8000760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_NRF24_CSN_Pin;
 8001adc:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI_NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001ade:	a905      	add	r1, sp, #20
 8001ae0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = SPI_NRF24_CSN_Pin;
 8001ae2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SPI_NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f7fe fe39 	bl	8000760 <HAL_GPIO_Init>

}
 8001aee:	b00b      	add	sp, #44	; 0x2c
 8001af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020c00 	.word	0x40020c00

08001b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b00:	b530      	push	{r4, r5, lr}
 8001b02:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b04:	2230      	movs	r2, #48	; 0x30
 8001b06:	2100      	movs	r1, #0
 8001b08:	a808      	add	r0, sp, #32
 8001b0a:	f000 fb55 	bl	80021b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2214      	movs	r2, #20
 8001b12:	a803      	add	r0, sp, #12
 8001b14:	f000 fb50 	bl	80021b8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b18:	2400      	movs	r4, #0
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <SystemClock_Config+0x90>)
 8001b1c:	9401      	str	r4, [sp, #4]
 8001b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <SystemClock_Config+0x94>)
 8001b32:	9402      	str	r4, [sp, #8]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b3e:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b50:	2308      	movs	r3, #8
 8001b52:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b54:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b56:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b58:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b60:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b62:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b64:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b66:	f7fe ff29 	bl	80009bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b6a:	f7fe feeb 	bl	8000944 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6e:	230f      	movs	r3, #15
 8001b70:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b76:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b78:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b7e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b80:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b82:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b84:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b86:	f7ff f8c9 	bl	8000d1c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001b8a:	b015      	add	sp, #84	; 0x54
 8001b8c:	bd30      	pop	{r4, r5, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000

08001b98 <main>:
{
 8001b98:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8001b9a:	f7fe fd25 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 8001b9e:	f7ff ffaf 	bl	8001b00 <SystemClock_Config>
	printf(" System start!\n\r");
 8001ba2:	4835      	ldr	r0, [pc, #212]	; (8001c78 <main+0xe0>)
		if (MFRC522_Check(CardID) == MI_OK)
 8001ba4:	4c35      	ldr	r4, [pc, #212]	; (8001c7c <main+0xe4>)
			printf("Nie wykryto karty \r\n");
 8001ba6:	4e36      	ldr	r6, [pc, #216]	; (8001c80 <main+0xe8>)
			HAL_UART_Transmit_IT(&huart2, CardID, sizeof(CardID));
 8001ba8:	4d36      	ldr	r5, [pc, #216]	; (8001c84 <main+0xec>)
	printf(" System start!\n\r");
 8001baa:	f000 fb0d 	bl	80021c8 <iprintf>
	printf(" HAL Init\n\r");
 8001bae:	4836      	ldr	r0, [pc, #216]	; (8001c88 <main+0xf0>)
 8001bb0:	f000 fb0a 	bl	80021c8 <iprintf>
  printf(" SystemClock_Config\n\r");
 8001bb4:	4835      	ldr	r0, [pc, #212]	; (8001c8c <main+0xf4>)
 8001bb6:	f000 fb07 	bl	80021c8 <iprintf>
  printf(" Initialize all configured peripherals\n\r");
 8001bba:	4835      	ldr	r0, [pc, #212]	; (8001c90 <main+0xf8>)
 8001bbc:	f000 fb04 	bl	80021c8 <iprintf>
  MX_GPIO_Init();
 8001bc0:	f7ff ff44 	bl	8001a4c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001bc4:	f000 f872 	bl	8001cac <MX_SPI1_Init>
  MX_SPI3_Init();
 8001bc8:	f000 f892 	bl	8001cf0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001bcc:	f000 f9ca 	bl	8001f64 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001bd0:	f000 fa00 	bl	8001fd4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001bd4:	f000 f9e2 	bl	8001f9c <MX_USART2_UART_Init>
  MX_GFXSIMULATOR_Init();
 8001bd8:	f7ff ff36 	bl	8001a48 <MX_GFXSIMULATOR_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4611      	mov	r1, r2
 8001be0:	2023      	movs	r0, #35	; 0x23
 8001be2:	f7fe fd53 	bl	800068c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001be6:	2023      	movs	r0, #35	; 0x23
 8001be8:	f7fe fd84 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	4611      	mov	r1, r2
 8001bf0:	2025      	movs	r0, #37	; 0x25
 8001bf2:	f7fe fd4b 	bl	800068c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bf6:	2025      	movs	r0, #37	; 0x25
 8001bf8:	f7fe fd7c 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4611      	mov	r1, r2
 8001c00:	2026      	movs	r0, #38	; 0x26
 8001c02:	f7fe fd43 	bl	800068c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c06:	2026      	movs	r0, #38	; 0x26
 8001c08:	f7fe fd74 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4611      	mov	r1, r2
 8001c10:	2027      	movs	r0, #39	; 0x27
 8001c12:	f7fe fd3b 	bl	800068c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c16:	2027      	movs	r0, #39	; 0x27
 8001c18:	f7fe fd6c 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4611      	mov	r1, r2
 8001c20:	2033      	movs	r0, #51	; 0x33
 8001c22:	f7fe fd33 	bl	800068c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001c26:	2033      	movs	r0, #51	; 0x33
 8001c28:	f7fe fd64 	bl	80006f4 <HAL_NVIC_EnableIRQ>
	printf(" MFRC522_Init\n\r");
 8001c2c:	4819      	ldr	r0, [pc, #100]	; (8001c94 <main+0xfc>)
 8001c2e:	f000 facb 	bl	80021c8 <iprintf>
		if (MFRC522_Check(CardID) == MI_OK)
 8001c32:	4812      	ldr	r0, [pc, #72]	; (8001c7c <main+0xe4>)
 8001c34:	f7ff fef8 	bl	8001a28 <MFRC522_Check>
 8001c38:	b9d0      	cbnz	r0, 8001c70 <main+0xd8>
			printf("[%02x-%02x-%02x-%02x] \r\n", CardID[0], CardID[1], CardID[2],
 8001c3a:	78e0      	ldrb	r0, [r4, #3]
 8001c3c:	7862      	ldrb	r2, [r4, #1]
 8001c3e:	7821      	ldrb	r1, [r4, #0]
 8001c40:	9000      	str	r0, [sp, #0]
 8001c42:	78a3      	ldrb	r3, [r4, #2]
 8001c44:	4814      	ldr	r0, [pc, #80]	; (8001c98 <main+0x100>)
 8001c46:	f000 fabf 	bl	80021c8 <iprintf>
			HAL_UART_Transmit_IT(&huart2, CardID, sizeof(CardID));
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	4628      	mov	r0, r5
 8001c50:	f7ff fc6c 	bl	800152c <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8001c54:	2064      	movs	r0, #100	; 0x64
 8001c56:	f7fe fcf3 	bl	8000640 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2, datawaiting, sizeof(datawaiting));
 8001c5a:	221c      	movs	r2, #28
 8001c5c:	490f      	ldr	r1, [pc, #60]	; (8001c9c <main+0x104>)
 8001c5e:	4628      	mov	r0, r5
 8001c60:	f7ff fc64 	bl	800152c <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart1,MyID,sizeof(MyID));
 8001c64:	2207      	movs	r2, #7
 8001c66:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <main+0x108>)
 8001c68:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <main+0x10c>)
 8001c6a:	f7ff fc5f 	bl	800152c <HAL_UART_Transmit_IT>
		if (MFRC522_Check(CardID) == MI_OK)
 8001c6e:	e7e0      	b.n	8001c32 <main+0x9a>
			printf("Nie wykryto karty \r\n");
 8001c70:	4630      	mov	r0, r6
 8001c72:	f000 fb1d 	bl	80022b0 <puts>
 8001c76:	e7ed      	b.n	8001c54 <main+0xbc>
 8001c78:	08003098 	.word	0x08003098
 8001c7c:	20000118 	.word	0x20000118
 8001c80:	0800311d 	.word	0x0800311d
 8001c84:	200001f4 	.word	0x200001f4
 8001c88:	080030a9 	.word	0x080030a9
 8001c8c:	080030b5 	.word	0x080030b5
 8001c90:	080030cb 	.word	0x080030cb
 8001c94:	080030f4 	.word	0x080030f4
 8001c98:	08003104 	.word	0x08003104
 8001c9c:	2000000f 	.word	0x2000000f
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	200001b4 	.word	0x200001b4

08001ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca8:	4770      	bx	lr
	...

08001cac <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cac:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8001cae:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_SPI1_Init+0x40>)
 8001cb2:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8001cb6:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cbe:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cc8:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cca:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ccc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cce:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cd0:	230a      	movs	r3, #10
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cd2:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001cd4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cd6:	f7ff f91f 	bl	8000f18 <HAL_SPI_Init>
 8001cda:	b118      	cbz	r0, 8001ce4 <MX_SPI1_Init+0x38>
  {
    Error_Handler();
  }

}
 8001cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001ce0:	f7ff bfe2 	b.w	8001ca8 <Error_Handler>
 8001ce4:	bd08      	pop	{r3, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200000c0 	.word	0x200000c0
 8001cec:	40013000 	.word	0x40013000

08001cf0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001cf0:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8001cf2:	480e      	ldr	r0, [pc, #56]	; (8001d2c <MX_SPI3_Init+0x3c>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_SPI3_Init+0x40>)
 8001cf6:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8001cfa:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d02:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d04:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d06:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d0c:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0e:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d10:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d12:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d14:	230a      	movs	r3, #10
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d16:	6182      	str	r2, [r0, #24]
  hspi3.Init.CRCPolynomial = 10;
 8001d18:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d1a:	f7ff f8fd 	bl	8000f18 <HAL_SPI_Init>
 8001d1e:	b118      	cbz	r0, 8001d28 <MX_SPI3_Init+0x38>
  {
    Error_Handler();
  }

}
 8001d20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001d24:	f7ff bfc0 	b.w	8001ca8 <Error_Handler>
 8001d28:	bd08      	pop	{r3, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000011c 	.word	0x2000011c
 8001d30:	40003c00 	.word	0x40003c00

08001d34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d34:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	2214      	movs	r2, #20
{
 8001d38:	b08a      	sub	sp, #40	; 0x28
 8001d3a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	eb0d 0002 	add.w	r0, sp, r2
 8001d42:	f000 fa39 	bl	80021b8 <memset>
  if(spiHandle->Instance==SPI1)
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_SPI_MspInit+0xac>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d123      	bne.n	8001d96 <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_SPI_MspInit+0xb0>)
    GPIO_InitStruct.Pin = SPI_RFID_SCK_Pin|SPI_RFID_MISO_Pin|SPI_RFID_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	4825      	ldr	r0, [pc, #148]	; (8001de8 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d52:	2100      	movs	r1, #0
 8001d54:	9101      	str	r1, [sp, #4]
 8001d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d64:	9201      	str	r2, [sp, #4]
 8001d66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	9102      	str	r1, [sp, #8]
 8001d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	9302      	str	r3, [sp, #8]
 8001d7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_RFID_SCK_Pin|SPI_RFID_MISO_Pin|SPI_RFID_MOSI_Pin;
 8001d7c:	23e0      	movs	r3, #224	; 0xe0
 8001d7e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d88:	2305      	movs	r3, #5
 8001d8a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = SPI_NRF24_SCK_Pin|SPI_NRF24_MISO_Pin|SPI_NRF24_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8e:	f7fe fce7 	bl	8000760 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001d92:	b00a      	add	sp, #40	; 0x28
 8001d94:	bd10      	pop	{r4, pc}
  else if(spiHandle->Instance==SPI3)
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_SPI_MspInit+0xb8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d1fa      	bne.n	8001d92 <HAL_SPI_MspInit+0x5e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_SPI_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001da0:	2100      	movs	r1, #0
 8001da2:	9103      	str	r1, [sp, #12]
 8001da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
 8001dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dae:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001db2:	9203      	str	r2, [sp, #12]
 8001db4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db6:	9104      	str	r1, [sp, #16]
 8001db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dba:	f042 0204 	orr.w	r2, r2, #4
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	9304      	str	r3, [sp, #16]
 8001dc8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SPI_NRF24_SCK_Pin|SPI_NRF24_MISO_Pin|SPI_NRF24_MOSI_Pin;
 8001dca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dd8:	2306      	movs	r3, #6
 8001dda:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ddc:	a905      	add	r1, sp, #20
 8001dde:	e7d6      	b.n	8001d8e <HAL_SPI_MspInit+0x5a>
 8001de0:	40013000 	.word	0x40013000
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40003c00 	.word	0x40003c00
 8001df0:	40020800 	.word	0x40020800

08001df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_MspInit+0x34>)
 8001df8:	2100      	movs	r1, #0
 8001dfa:	9100      	str	r1, [sp, #0]
 8001dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
 8001e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e06:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e0a:	9200      	str	r2, [sp, #0]
 8001e0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	9101      	str	r1, [sp, #4]
 8001e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e22:	b002      	add	sp, #8
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800

08001e2c <NMI_Handler>:
 8001e2c:	4770      	bx	lr

08001e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	e7fe      	b.n	8001e30 <MemManage_Handler>

08001e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e32:	e7fe      	b.n	8001e32 <BusFault_Handler>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	e7fe      	b.n	8001e34 <UsageFault_Handler>

08001e36 <SVC_Handler>:
 8001e36:	4770      	bx	lr

08001e38 <DebugMon_Handler>:
 8001e38:	4770      	bx	lr

08001e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3c:	f7fe bbee 	b.w	800061c <HAL_IncTick>

08001e40 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e40:	4801      	ldr	r0, [pc, #4]	; (8001e48 <SPI1_IRQHandler+0x8>)
 8001e42:	f7ff b997 	b.w	8001174 <HAL_SPI_IRQHandler>
 8001e46:	bf00      	nop
 8001e48:	200000c0 	.word	0x200000c0

08001e4c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e4c:	4801      	ldr	r0, [pc, #4]	; (8001e54 <USART1_IRQHandler+0x8>)
 8001e4e:	f7ff bbcd 	b.w	80015ec <HAL_UART_IRQHandler>
 8001e52:	bf00      	nop
 8001e54:	200001b4 	.word	0x200001b4

08001e58 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e58:	4801      	ldr	r0, [pc, #4]	; (8001e60 <USART2_IRQHandler+0x8>)
 8001e5a:	f7ff bbc7 	b.w	80015ec <HAL_UART_IRQHandler>
 8001e5e:	bf00      	nop
 8001e60:	200001f4 	.word	0x200001f4

08001e64 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e64:	4801      	ldr	r0, [pc, #4]	; (8001e6c <USART3_IRQHandler+0x8>)
 8001e66:	f7ff bbc1 	b.w	80015ec <HAL_UART_IRQHandler>
 8001e6a:	bf00      	nop
 8001e6c:	20000174 	.word	0x20000174

08001e70 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001e70:	4801      	ldr	r0, [pc, #4]	; (8001e78 <SPI3_IRQHandler+0x8>)
 8001e72:	f7ff b97f 	b.w	8001174 <HAL_SPI_IRQHandler>
 8001e76:	bf00      	nop
 8001e78:	2000011c 	.word	0x2000011c

08001e7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	460e      	mov	r6, r1
 8001e80:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	460c      	mov	r4, r1
 8001e84:	1ba3      	subs	r3, r4, r6
 8001e86:	429d      	cmp	r5, r3
 8001e88:	dc01      	bgt.n	8001e8e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001e8e:	f3af 8000 	nop.w
 8001e92:	f804 0b01 	strb.w	r0, [r4], #1
 8001e96:	e7f5      	b.n	8001e84 <_read+0x8>

08001e98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e98:	b510      	push	{r4, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e9c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	db01      	blt.n	8001ea8 <_write+0x10>
	{
		ITM_SendChar(*ptr++);
	}
	return len;
}
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	bd10      	pop	{r4, pc}
 8001ea8:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8001eac:	07c0      	lsls	r0, r0, #31
 8001eae:	d503      	bpl.n	8001eb8 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001eb0:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001eb4:	07c0      	lsls	r0, r0, #31
 8001eb6:	d402      	bmi.n	8001ebe <_write+0x26>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb8:	3301      	adds	r3, #1
 8001eba:	e7f1      	b.n	8001ea0 <_write+0x8>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8001ebc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ebe:	6820      	ldr	r0, [r4, #0]
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d0fb      	beq.n	8001ebc <_write+0x24>
		ITM_SendChar(*ptr++);
 8001ec4:	5cc8      	ldrb	r0, [r1, r3]
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001ec6:	7020      	strb	r0, [r4, #0]
 8001ec8:	e7f6      	b.n	8001eb8 <_write+0x20>
	...

08001ecc <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001ecc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <_sbrk+0x2c>)
 8001ed0:	6819      	ldr	r1, [r3, #0]
{
 8001ed2:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001ed4:	b909      	cbnz	r1, 8001eda <_sbrk+0xe>
		heap_end = &end;
 8001ed6:	4909      	ldr	r1, [pc, #36]	; (8001efc <_sbrk+0x30>)
 8001ed8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001eda:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001edc:	4669      	mov	r1, sp
 8001ede:	4402      	add	r2, r0
 8001ee0:	428a      	cmp	r2, r1
 8001ee2:	d906      	bls.n	8001ef2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001ee4:	f000 f93e 	bl	8002164 <__errno>
 8001ee8:	230c      	movs	r3, #12
 8001eea:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001ef2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001ef4:	bd08      	pop	{r3, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200000b0 	.word	0x200000b0
 8001efc:	20000238 	.word	0x20000238

08001f00 <_close>:

int _close(int file)
{
	return -1;
}
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	4770      	bx	lr

08001f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	4770      	bx	lr

08001f10 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f10:	2001      	movs	r0, #1
 8001f12:	4770      	bx	lr

08001f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f14:	2000      	movs	r0, #0
 8001f16:	4770      	bx	lr

08001f18 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <SystemInit+0x40>)
 8001f1a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <SystemInit+0x44>)
 8001f28:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f2a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001f32:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <SystemInit+0x48>)
 8001f42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f4c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f52:	608b      	str	r3, [r1, #8]
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	24003010 	.word	0x24003010

08001f64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f64:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001f66:	480b      	ldr	r0, [pc, #44]	; (8001f94 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <MX_USART1_UART_Init+0x34>)
 8001f6a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001f6e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f72:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f74:	2300      	movs	r3, #0
 8001f76:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f78:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f7a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f82:	f7ff faa5 	bl	80014d0 <HAL_UART_Init>
 8001f86:	b118      	cbz	r0, 8001f90 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001f88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001f8c:	f7ff be8c 	b.w	8001ca8 <Error_Handler>
 8001f90:	bd08      	pop	{r3, pc}
 8001f92:	bf00      	nop
 8001f94:	200001b4 	.word	0x200001b4
 8001f98:	40011000 	.word	0x40011000

08001f9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f9c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001f9e:	480b      	ldr	r0, [pc, #44]	; (8001fcc <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_USART2_UART_Init+0x34>)
 8001fa2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001fa6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001faa:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fac:	2300      	movs	r3, #0
 8001fae:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fb2:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fba:	f7ff fa89 	bl	80014d0 <HAL_UART_Init>
 8001fbe:	b118      	cbz	r0, 8001fc8 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001fc4:	f7ff be70 	b.w	8001ca8 <Error_Handler>
 8001fc8:	bd08      	pop	{r3, pc}
 8001fca:	bf00      	nop
 8001fcc:	200001f4 	.word	0x200001f4
 8001fd0:	40004400 	.word	0x40004400

08001fd4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fd4:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8001fd6:	480b      	ldr	r0, [pc, #44]	; (8002004 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <MX_USART3_UART_Init+0x34>)
 8001fda:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001fde:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe2:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fea:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fec:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ff2:	f7ff fa6d 	bl	80014d0 <HAL_UART_Init>
 8001ff6:	b118      	cbz	r0, 8002000 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001ff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001ffc:	f7ff be54 	b.w	8001ca8 <Error_Handler>
 8002000:	bd08      	pop	{r3, pc}
 8002002:	bf00      	nop
 8002004:	20000174 	.word	0x20000174
 8002008:	40004800 	.word	0x40004800

0800200c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800200c:	b510      	push	{r4, lr}
 800200e:	4604      	mov	r4, r0
 8002010:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002012:	2214      	movs	r2, #20
 8002014:	2100      	movs	r1, #0
 8002016:	a807      	add	r0, sp, #28
 8002018:	f000 f8ce 	bl	80021b8 <memset>
  if(uartHandle->Instance==USART1)
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	4a36      	ldr	r2, [pc, #216]	; (80020f8 <HAL_UART_MspInit+0xec>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d126      	bne.n	8002072 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_UART_MspInit+0xf0>)
 8002026:	2100      	movs	r1, #0
 8002028:	9101      	str	r1, [sp, #4]
 800202a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800202c:	f042 0210 	orr.w	r2, r2, #16
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
 8002032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002034:	f002 0210 	and.w	r2, r2, #16
 8002038:	9201      	str	r2, [sp, #4]
 800203a:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	9102      	str	r1, [sp, #8]
 800203e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002040:	f042 0201 	orr.w	r2, r2, #1
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	9302      	str	r3, [sp, #8]
 800204e:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002050:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002054:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800205a:	2301      	movs	r3, #1
 800205c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	4827      	ldr	r0, [pc, #156]	; (8002100 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002064:	2307      	movs	r3, #7
 8002066:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	f7fe fb79 	bl	8000760 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800206e:	b00c      	add	sp, #48	; 0x30
 8002070:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 8002072:	4a24      	ldr	r2, [pc, #144]	; (8002104 <HAL_UART_MspInit+0xf8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d117      	bne.n	80020a8 <HAL_UART_MspInit+0x9c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_UART_MspInit+0xf0>)
 800207a:	2100      	movs	r1, #0
 800207c:	9103      	str	r1, [sp, #12]
 800207e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002080:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
 8002086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002088:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800208c:	9203      	str	r2, [sp, #12]
 800208e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	9104      	str	r1, [sp, #16]
 8002092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	9304      	str	r3, [sp, #16]
 80020a2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020a4:	230c      	movs	r3, #12
 80020a6:	e7d5      	b.n	8002054 <HAL_UART_MspInit+0x48>
  else if(uartHandle->Instance==USART3)
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_UART_MspInit+0xfc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d1df      	bne.n	800206e <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_UART_MspInit+0xf0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	4816      	ldr	r0, [pc, #88]	; (800210c <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b2:	2100      	movs	r1, #0
 80020b4:	9105      	str	r1, [sp, #20]
 80020b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
 80020be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80020c4:	9205      	str	r2, [sp, #20]
 80020c6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c8:	9106      	str	r1, [sp, #24]
 80020ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020cc:	f042 0202 	orr.w	r2, r2, #2
 80020d0:	631a      	str	r2, [r3, #48]	; 0x30
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	9306      	str	r3, [sp, #24]
 80020da:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020e0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020ee:	2307      	movs	r3, #7
 80020f0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f2:	a907      	add	r1, sp, #28
 80020f4:	e7b9      	b.n	800206a <HAL_UART_MspInit+0x5e>
 80020f6:	bf00      	nop
 80020f8:	40011000 	.word	0x40011000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000
 8002104:	40004400 	.word	0x40004400
 8002108:	40004800 	.word	0x40004800
 800210c:	40020400 	.word	0x40020400

08002110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002148 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002114:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002116:	e003      	b.n	8002120 <LoopCopyDataInit>

08002118 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800211a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800211c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800211e:	3104      	adds	r1, #4

08002120 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002120:	480b      	ldr	r0, [pc, #44]	; (8002150 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002124:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002126:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002128:	d3f6      	bcc.n	8002118 <CopyDataInit>
  ldr  r2, =_sbss
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800212c:	e002      	b.n	8002134 <LoopFillZerobss>

0800212e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800212e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002130:	f842 3b04 	str.w	r3, [r2], #4

08002134 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002136:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002138:	d3f9      	bcc.n	800212e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800213a:	f7ff feed 	bl	8001f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213e:	f000 f817 	bl	8002170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002142:	f7ff fd29 	bl	8001b98 <main>
  bx  lr    
 8002146:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002148:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800214c:	080031f4 	.word	0x080031f4
  ldr  r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002154:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8002158:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800215c:	20000238 	.word	0x20000238

08002160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <ADC_IRQHandler>
	...

08002164 <__errno>:
 8002164:	4b01      	ldr	r3, [pc, #4]	; (800216c <__errno+0x8>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000030 	.word	0x20000030

08002170 <__libc_init_array>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	4e0d      	ldr	r6, [pc, #52]	; (80021a8 <__libc_init_array+0x38>)
 8002174:	4c0d      	ldr	r4, [pc, #52]	; (80021ac <__libc_init_array+0x3c>)
 8002176:	1ba4      	subs	r4, r4, r6
 8002178:	10a4      	asrs	r4, r4, #2
 800217a:	2500      	movs	r5, #0
 800217c:	42a5      	cmp	r5, r4
 800217e:	d109      	bne.n	8002194 <__libc_init_array+0x24>
 8002180:	4e0b      	ldr	r6, [pc, #44]	; (80021b0 <__libc_init_array+0x40>)
 8002182:	4c0c      	ldr	r4, [pc, #48]	; (80021b4 <__libc_init_array+0x44>)
 8002184:	f000 ff7c 	bl	8003080 <_init>
 8002188:	1ba4      	subs	r4, r4, r6
 800218a:	10a4      	asrs	r4, r4, #2
 800218c:	2500      	movs	r5, #0
 800218e:	42a5      	cmp	r5, r4
 8002190:	d105      	bne.n	800219e <__libc_init_array+0x2e>
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002198:	4798      	blx	r3
 800219a:	3501      	adds	r5, #1
 800219c:	e7ee      	b.n	800217c <__libc_init_array+0xc>
 800219e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a2:	4798      	blx	r3
 80021a4:	3501      	adds	r5, #1
 80021a6:	e7f2      	b.n	800218e <__libc_init_array+0x1e>
 80021a8:	080031ec 	.word	0x080031ec
 80021ac:	080031ec 	.word	0x080031ec
 80021b0:	080031ec 	.word	0x080031ec
 80021b4:	080031f0 	.word	0x080031f0

080021b8 <memset>:
 80021b8:	4402      	add	r2, r0
 80021ba:	4603      	mov	r3, r0
 80021bc:	4293      	cmp	r3, r2
 80021be:	d100      	bne.n	80021c2 <memset+0xa>
 80021c0:	4770      	bx	lr
 80021c2:	f803 1b01 	strb.w	r1, [r3], #1
 80021c6:	e7f9      	b.n	80021bc <memset+0x4>

080021c8 <iprintf>:
 80021c8:	b40f      	push	{r0, r1, r2, r3}
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <iprintf+0x2c>)
 80021cc:	b513      	push	{r0, r1, r4, lr}
 80021ce:	681c      	ldr	r4, [r3, #0]
 80021d0:	b124      	cbz	r4, 80021dc <iprintf+0x14>
 80021d2:	69a3      	ldr	r3, [r4, #24]
 80021d4:	b913      	cbnz	r3, 80021dc <iprintf+0x14>
 80021d6:	4620      	mov	r0, r4
 80021d8:	f000 fa24 	bl	8002624 <__sinit>
 80021dc:	ab05      	add	r3, sp, #20
 80021de:	9a04      	ldr	r2, [sp, #16]
 80021e0:	68a1      	ldr	r1, [r4, #8]
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	4620      	mov	r0, r4
 80021e6:	f000 fbe1 	bl	80029ac <_vfiprintf_r>
 80021ea:	b002      	add	sp, #8
 80021ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021f0:	b004      	add	sp, #16
 80021f2:	4770      	bx	lr
 80021f4:	20000030 	.word	0x20000030

080021f8 <_puts_r>:
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	460e      	mov	r6, r1
 80021fc:	4605      	mov	r5, r0
 80021fe:	b118      	cbz	r0, 8002208 <_puts_r+0x10>
 8002200:	6983      	ldr	r3, [r0, #24]
 8002202:	b90b      	cbnz	r3, 8002208 <_puts_r+0x10>
 8002204:	f000 fa0e 	bl	8002624 <__sinit>
 8002208:	69ab      	ldr	r3, [r5, #24]
 800220a:	68ac      	ldr	r4, [r5, #8]
 800220c:	b913      	cbnz	r3, 8002214 <_puts_r+0x1c>
 800220e:	4628      	mov	r0, r5
 8002210:	f000 fa08 	bl	8002624 <__sinit>
 8002214:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <_puts_r+0xac>)
 8002216:	429c      	cmp	r4, r3
 8002218:	d117      	bne.n	800224a <_puts_r+0x52>
 800221a:	686c      	ldr	r4, [r5, #4]
 800221c:	89a3      	ldrh	r3, [r4, #12]
 800221e:	071b      	lsls	r3, r3, #28
 8002220:	d51d      	bpl.n	800225e <_puts_r+0x66>
 8002222:	6923      	ldr	r3, [r4, #16]
 8002224:	b1db      	cbz	r3, 800225e <_puts_r+0x66>
 8002226:	3e01      	subs	r6, #1
 8002228:	68a3      	ldr	r3, [r4, #8]
 800222a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800222e:	3b01      	subs	r3, #1
 8002230:	60a3      	str	r3, [r4, #8]
 8002232:	b9e9      	cbnz	r1, 8002270 <_puts_r+0x78>
 8002234:	2b00      	cmp	r3, #0
 8002236:	da2e      	bge.n	8002296 <_puts_r+0x9e>
 8002238:	4622      	mov	r2, r4
 800223a:	210a      	movs	r1, #10
 800223c:	4628      	mov	r0, r5
 800223e:	f000 f83f 	bl	80022c0 <__swbuf_r>
 8002242:	3001      	adds	r0, #1
 8002244:	d011      	beq.n	800226a <_puts_r+0x72>
 8002246:	200a      	movs	r0, #10
 8002248:	bd70      	pop	{r4, r5, r6, pc}
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <_puts_r+0xb0>)
 800224c:	429c      	cmp	r4, r3
 800224e:	d101      	bne.n	8002254 <_puts_r+0x5c>
 8002250:	68ac      	ldr	r4, [r5, #8]
 8002252:	e7e3      	b.n	800221c <_puts_r+0x24>
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <_puts_r+0xb4>)
 8002256:	429c      	cmp	r4, r3
 8002258:	bf08      	it	eq
 800225a:	68ec      	ldreq	r4, [r5, #12]
 800225c:	e7de      	b.n	800221c <_puts_r+0x24>
 800225e:	4621      	mov	r1, r4
 8002260:	4628      	mov	r0, r5
 8002262:	f000 f87f 	bl	8002364 <__swsetup_r>
 8002266:	2800      	cmp	r0, #0
 8002268:	d0dd      	beq.n	8002226 <_puts_r+0x2e>
 800226a:	f04f 30ff 	mov.w	r0, #4294967295
 800226e:	bd70      	pop	{r4, r5, r6, pc}
 8002270:	2b00      	cmp	r3, #0
 8002272:	da04      	bge.n	800227e <_puts_r+0x86>
 8002274:	69a2      	ldr	r2, [r4, #24]
 8002276:	4293      	cmp	r3, r2
 8002278:	db06      	blt.n	8002288 <_puts_r+0x90>
 800227a:	290a      	cmp	r1, #10
 800227c:	d004      	beq.n	8002288 <_puts_r+0x90>
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	6022      	str	r2, [r4, #0]
 8002284:	7019      	strb	r1, [r3, #0]
 8002286:	e7cf      	b.n	8002228 <_puts_r+0x30>
 8002288:	4622      	mov	r2, r4
 800228a:	4628      	mov	r0, r5
 800228c:	f000 f818 	bl	80022c0 <__swbuf_r>
 8002290:	3001      	adds	r0, #1
 8002292:	d1c9      	bne.n	8002228 <_puts_r+0x30>
 8002294:	e7e9      	b.n	800226a <_puts_r+0x72>
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	200a      	movs	r0, #10
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	6022      	str	r2, [r4, #0]
 800229e:	7018      	strb	r0, [r3, #0]
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
 80022a2:	bf00      	nop
 80022a4:	08003170 	.word	0x08003170
 80022a8:	08003190 	.word	0x08003190
 80022ac:	08003150 	.word	0x08003150

080022b0 <puts>:
 80022b0:	4b02      	ldr	r3, [pc, #8]	; (80022bc <puts+0xc>)
 80022b2:	4601      	mov	r1, r0
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	f7ff bf9f 	b.w	80021f8 <_puts_r>
 80022ba:	bf00      	nop
 80022bc:	20000030 	.word	0x20000030

080022c0 <__swbuf_r>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	460e      	mov	r6, r1
 80022c4:	4614      	mov	r4, r2
 80022c6:	4605      	mov	r5, r0
 80022c8:	b118      	cbz	r0, 80022d2 <__swbuf_r+0x12>
 80022ca:	6983      	ldr	r3, [r0, #24]
 80022cc:	b90b      	cbnz	r3, 80022d2 <__swbuf_r+0x12>
 80022ce:	f000 f9a9 	bl	8002624 <__sinit>
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <__swbuf_r+0x98>)
 80022d4:	429c      	cmp	r4, r3
 80022d6:	d12a      	bne.n	800232e <__swbuf_r+0x6e>
 80022d8:	686c      	ldr	r4, [r5, #4]
 80022da:	69a3      	ldr	r3, [r4, #24]
 80022dc:	60a3      	str	r3, [r4, #8]
 80022de:	89a3      	ldrh	r3, [r4, #12]
 80022e0:	071a      	lsls	r2, r3, #28
 80022e2:	d52e      	bpl.n	8002342 <__swbuf_r+0x82>
 80022e4:	6923      	ldr	r3, [r4, #16]
 80022e6:	b363      	cbz	r3, 8002342 <__swbuf_r+0x82>
 80022e8:	6923      	ldr	r3, [r4, #16]
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	1ac0      	subs	r0, r0, r3
 80022ee:	6963      	ldr	r3, [r4, #20]
 80022f0:	b2f6      	uxtb	r6, r6
 80022f2:	4298      	cmp	r0, r3
 80022f4:	4637      	mov	r7, r6
 80022f6:	db04      	blt.n	8002302 <__swbuf_r+0x42>
 80022f8:	4621      	mov	r1, r4
 80022fa:	4628      	mov	r0, r5
 80022fc:	f000 f928 	bl	8002550 <_fflush_r>
 8002300:	bb28      	cbnz	r0, 800234e <__swbuf_r+0x8e>
 8002302:	68a3      	ldr	r3, [r4, #8]
 8002304:	3b01      	subs	r3, #1
 8002306:	60a3      	str	r3, [r4, #8]
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	6022      	str	r2, [r4, #0]
 800230e:	701e      	strb	r6, [r3, #0]
 8002310:	6963      	ldr	r3, [r4, #20]
 8002312:	3001      	adds	r0, #1
 8002314:	4298      	cmp	r0, r3
 8002316:	d004      	beq.n	8002322 <__swbuf_r+0x62>
 8002318:	89a3      	ldrh	r3, [r4, #12]
 800231a:	07db      	lsls	r3, r3, #31
 800231c:	d519      	bpl.n	8002352 <__swbuf_r+0x92>
 800231e:	2e0a      	cmp	r6, #10
 8002320:	d117      	bne.n	8002352 <__swbuf_r+0x92>
 8002322:	4621      	mov	r1, r4
 8002324:	4628      	mov	r0, r5
 8002326:	f000 f913 	bl	8002550 <_fflush_r>
 800232a:	b190      	cbz	r0, 8002352 <__swbuf_r+0x92>
 800232c:	e00f      	b.n	800234e <__swbuf_r+0x8e>
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <__swbuf_r+0x9c>)
 8002330:	429c      	cmp	r4, r3
 8002332:	d101      	bne.n	8002338 <__swbuf_r+0x78>
 8002334:	68ac      	ldr	r4, [r5, #8]
 8002336:	e7d0      	b.n	80022da <__swbuf_r+0x1a>
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <__swbuf_r+0xa0>)
 800233a:	429c      	cmp	r4, r3
 800233c:	bf08      	it	eq
 800233e:	68ec      	ldreq	r4, [r5, #12]
 8002340:	e7cb      	b.n	80022da <__swbuf_r+0x1a>
 8002342:	4621      	mov	r1, r4
 8002344:	4628      	mov	r0, r5
 8002346:	f000 f80d 	bl	8002364 <__swsetup_r>
 800234a:	2800      	cmp	r0, #0
 800234c:	d0cc      	beq.n	80022e8 <__swbuf_r+0x28>
 800234e:	f04f 37ff 	mov.w	r7, #4294967295
 8002352:	4638      	mov	r0, r7
 8002354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002356:	bf00      	nop
 8002358:	08003170 	.word	0x08003170
 800235c:	08003190 	.word	0x08003190
 8002360:	08003150 	.word	0x08003150

08002364 <__swsetup_r>:
 8002364:	4b32      	ldr	r3, [pc, #200]	; (8002430 <__swsetup_r+0xcc>)
 8002366:	b570      	push	{r4, r5, r6, lr}
 8002368:	681d      	ldr	r5, [r3, #0]
 800236a:	4606      	mov	r6, r0
 800236c:	460c      	mov	r4, r1
 800236e:	b125      	cbz	r5, 800237a <__swsetup_r+0x16>
 8002370:	69ab      	ldr	r3, [r5, #24]
 8002372:	b913      	cbnz	r3, 800237a <__swsetup_r+0x16>
 8002374:	4628      	mov	r0, r5
 8002376:	f000 f955 	bl	8002624 <__sinit>
 800237a:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <__swsetup_r+0xd0>)
 800237c:	429c      	cmp	r4, r3
 800237e:	d10f      	bne.n	80023a0 <__swsetup_r+0x3c>
 8002380:	686c      	ldr	r4, [r5, #4]
 8002382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002386:	b29a      	uxth	r2, r3
 8002388:	0715      	lsls	r5, r2, #28
 800238a:	d42c      	bmi.n	80023e6 <__swsetup_r+0x82>
 800238c:	06d0      	lsls	r0, r2, #27
 800238e:	d411      	bmi.n	80023b4 <__swsetup_r+0x50>
 8002390:	2209      	movs	r2, #9
 8002392:	6032      	str	r2, [r6, #0]
 8002394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002398:	81a3      	strh	r3, [r4, #12]
 800239a:	f04f 30ff 	mov.w	r0, #4294967295
 800239e:	bd70      	pop	{r4, r5, r6, pc}
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <__swsetup_r+0xd4>)
 80023a2:	429c      	cmp	r4, r3
 80023a4:	d101      	bne.n	80023aa <__swsetup_r+0x46>
 80023a6:	68ac      	ldr	r4, [r5, #8]
 80023a8:	e7eb      	b.n	8002382 <__swsetup_r+0x1e>
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <__swsetup_r+0xd8>)
 80023ac:	429c      	cmp	r4, r3
 80023ae:	bf08      	it	eq
 80023b0:	68ec      	ldreq	r4, [r5, #12]
 80023b2:	e7e6      	b.n	8002382 <__swsetup_r+0x1e>
 80023b4:	0751      	lsls	r1, r2, #29
 80023b6:	d512      	bpl.n	80023de <__swsetup_r+0x7a>
 80023b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023ba:	b141      	cbz	r1, 80023ce <__swsetup_r+0x6a>
 80023bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023c0:	4299      	cmp	r1, r3
 80023c2:	d002      	beq.n	80023ca <__swsetup_r+0x66>
 80023c4:	4630      	mov	r0, r6
 80023c6:	f000 fa1b 	bl	8002800 <_free_r>
 80023ca:	2300      	movs	r3, #0
 80023cc:	6363      	str	r3, [r4, #52]	; 0x34
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023d4:	81a3      	strh	r3, [r4, #12]
 80023d6:	2300      	movs	r3, #0
 80023d8:	6063      	str	r3, [r4, #4]
 80023da:	6923      	ldr	r3, [r4, #16]
 80023dc:	6023      	str	r3, [r4, #0]
 80023de:	89a3      	ldrh	r3, [r4, #12]
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	81a3      	strh	r3, [r4, #12]
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	b94b      	cbnz	r3, 80023fe <__swsetup_r+0x9a>
 80023ea:	89a3      	ldrh	r3, [r4, #12]
 80023ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f4:	d003      	beq.n	80023fe <__swsetup_r+0x9a>
 80023f6:	4621      	mov	r1, r4
 80023f8:	4630      	mov	r0, r6
 80023fa:	f000 f9c1 	bl	8002780 <__smakebuf_r>
 80023fe:	89a2      	ldrh	r2, [r4, #12]
 8002400:	f012 0301 	ands.w	r3, r2, #1
 8002404:	d00c      	beq.n	8002420 <__swsetup_r+0xbc>
 8002406:	2300      	movs	r3, #0
 8002408:	60a3      	str	r3, [r4, #8]
 800240a:	6963      	ldr	r3, [r4, #20]
 800240c:	425b      	negs	r3, r3
 800240e:	61a3      	str	r3, [r4, #24]
 8002410:	6923      	ldr	r3, [r4, #16]
 8002412:	b953      	cbnz	r3, 800242a <__swsetup_r+0xc6>
 8002414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002418:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800241c:	d1ba      	bne.n	8002394 <__swsetup_r+0x30>
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	0792      	lsls	r2, r2, #30
 8002422:	bf58      	it	pl
 8002424:	6963      	ldrpl	r3, [r4, #20]
 8002426:	60a3      	str	r3, [r4, #8]
 8002428:	e7f2      	b.n	8002410 <__swsetup_r+0xac>
 800242a:	2000      	movs	r0, #0
 800242c:	e7f7      	b.n	800241e <__swsetup_r+0xba>
 800242e:	bf00      	nop
 8002430:	20000030 	.word	0x20000030
 8002434:	08003170 	.word	0x08003170
 8002438:	08003190 	.word	0x08003190
 800243c:	08003150 	.word	0x08003150

08002440 <__sflush_r>:
 8002440:	898a      	ldrh	r2, [r1, #12]
 8002442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002446:	4605      	mov	r5, r0
 8002448:	0710      	lsls	r0, r2, #28
 800244a:	460c      	mov	r4, r1
 800244c:	d45a      	bmi.n	8002504 <__sflush_r+0xc4>
 800244e:	684b      	ldr	r3, [r1, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	dc05      	bgt.n	8002460 <__sflush_r+0x20>
 8002454:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	dc02      	bgt.n	8002460 <__sflush_r+0x20>
 800245a:	2000      	movs	r0, #0
 800245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002462:	2e00      	cmp	r6, #0
 8002464:	d0f9      	beq.n	800245a <__sflush_r+0x1a>
 8002466:	2300      	movs	r3, #0
 8002468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800246c:	682f      	ldr	r7, [r5, #0]
 800246e:	602b      	str	r3, [r5, #0]
 8002470:	d033      	beq.n	80024da <__sflush_r+0x9a>
 8002472:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	075a      	lsls	r2, r3, #29
 8002478:	d505      	bpl.n	8002486 <__sflush_r+0x46>
 800247a:	6863      	ldr	r3, [r4, #4]
 800247c:	1ac0      	subs	r0, r0, r3
 800247e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002480:	b10b      	cbz	r3, 8002486 <__sflush_r+0x46>
 8002482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002484:	1ac0      	subs	r0, r0, r3
 8002486:	2300      	movs	r3, #0
 8002488:	4602      	mov	r2, r0
 800248a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800248c:	6a21      	ldr	r1, [r4, #32]
 800248e:	4628      	mov	r0, r5
 8002490:	47b0      	blx	r6
 8002492:	1c43      	adds	r3, r0, #1
 8002494:	89a3      	ldrh	r3, [r4, #12]
 8002496:	d106      	bne.n	80024a6 <__sflush_r+0x66>
 8002498:	6829      	ldr	r1, [r5, #0]
 800249a:	291d      	cmp	r1, #29
 800249c:	d84b      	bhi.n	8002536 <__sflush_r+0xf6>
 800249e:	4a2b      	ldr	r2, [pc, #172]	; (800254c <__sflush_r+0x10c>)
 80024a0:	40ca      	lsrs	r2, r1
 80024a2:	07d6      	lsls	r6, r2, #31
 80024a4:	d547      	bpl.n	8002536 <__sflush_r+0xf6>
 80024a6:	2200      	movs	r2, #0
 80024a8:	6062      	str	r2, [r4, #4]
 80024aa:	04d9      	lsls	r1, r3, #19
 80024ac:	6922      	ldr	r2, [r4, #16]
 80024ae:	6022      	str	r2, [r4, #0]
 80024b0:	d504      	bpl.n	80024bc <__sflush_r+0x7c>
 80024b2:	1c42      	adds	r2, r0, #1
 80024b4:	d101      	bne.n	80024ba <__sflush_r+0x7a>
 80024b6:	682b      	ldr	r3, [r5, #0]
 80024b8:	b903      	cbnz	r3, 80024bc <__sflush_r+0x7c>
 80024ba:	6560      	str	r0, [r4, #84]	; 0x54
 80024bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024be:	602f      	str	r7, [r5, #0]
 80024c0:	2900      	cmp	r1, #0
 80024c2:	d0ca      	beq.n	800245a <__sflush_r+0x1a>
 80024c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024c8:	4299      	cmp	r1, r3
 80024ca:	d002      	beq.n	80024d2 <__sflush_r+0x92>
 80024cc:	4628      	mov	r0, r5
 80024ce:	f000 f997 	bl	8002800 <_free_r>
 80024d2:	2000      	movs	r0, #0
 80024d4:	6360      	str	r0, [r4, #52]	; 0x34
 80024d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024da:	6a21      	ldr	r1, [r4, #32]
 80024dc:	2301      	movs	r3, #1
 80024de:	4628      	mov	r0, r5
 80024e0:	47b0      	blx	r6
 80024e2:	1c41      	adds	r1, r0, #1
 80024e4:	d1c6      	bne.n	8002474 <__sflush_r+0x34>
 80024e6:	682b      	ldr	r3, [r5, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0c3      	beq.n	8002474 <__sflush_r+0x34>
 80024ec:	2b1d      	cmp	r3, #29
 80024ee:	d001      	beq.n	80024f4 <__sflush_r+0xb4>
 80024f0:	2b16      	cmp	r3, #22
 80024f2:	d101      	bne.n	80024f8 <__sflush_r+0xb8>
 80024f4:	602f      	str	r7, [r5, #0]
 80024f6:	e7b0      	b.n	800245a <__sflush_r+0x1a>
 80024f8:	89a3      	ldrh	r3, [r4, #12]
 80024fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024fe:	81a3      	strh	r3, [r4, #12]
 8002500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002504:	690f      	ldr	r7, [r1, #16]
 8002506:	2f00      	cmp	r7, #0
 8002508:	d0a7      	beq.n	800245a <__sflush_r+0x1a>
 800250a:	0793      	lsls	r3, r2, #30
 800250c:	680e      	ldr	r6, [r1, #0]
 800250e:	bf08      	it	eq
 8002510:	694b      	ldreq	r3, [r1, #20]
 8002512:	600f      	str	r7, [r1, #0]
 8002514:	bf18      	it	ne
 8002516:	2300      	movne	r3, #0
 8002518:	eba6 0807 	sub.w	r8, r6, r7
 800251c:	608b      	str	r3, [r1, #8]
 800251e:	f1b8 0f00 	cmp.w	r8, #0
 8002522:	dd9a      	ble.n	800245a <__sflush_r+0x1a>
 8002524:	4643      	mov	r3, r8
 8002526:	463a      	mov	r2, r7
 8002528:	6a21      	ldr	r1, [r4, #32]
 800252a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800252c:	4628      	mov	r0, r5
 800252e:	47b0      	blx	r6
 8002530:	2800      	cmp	r0, #0
 8002532:	dc07      	bgt.n	8002544 <__sflush_r+0x104>
 8002534:	89a3      	ldrh	r3, [r4, #12]
 8002536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800253a:	81a3      	strh	r3, [r4, #12]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002544:	4407      	add	r7, r0
 8002546:	eba8 0800 	sub.w	r8, r8, r0
 800254a:	e7e8      	b.n	800251e <__sflush_r+0xde>
 800254c:	20400001 	.word	0x20400001

08002550 <_fflush_r>:
 8002550:	b538      	push	{r3, r4, r5, lr}
 8002552:	690b      	ldr	r3, [r1, #16]
 8002554:	4605      	mov	r5, r0
 8002556:	460c      	mov	r4, r1
 8002558:	b1db      	cbz	r3, 8002592 <_fflush_r+0x42>
 800255a:	b118      	cbz	r0, 8002564 <_fflush_r+0x14>
 800255c:	6983      	ldr	r3, [r0, #24]
 800255e:	b90b      	cbnz	r3, 8002564 <_fflush_r+0x14>
 8002560:	f000 f860 	bl	8002624 <__sinit>
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <_fflush_r+0x48>)
 8002566:	429c      	cmp	r4, r3
 8002568:	d109      	bne.n	800257e <_fflush_r+0x2e>
 800256a:	686c      	ldr	r4, [r5, #4]
 800256c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002570:	b17b      	cbz	r3, 8002592 <_fflush_r+0x42>
 8002572:	4621      	mov	r1, r4
 8002574:	4628      	mov	r0, r5
 8002576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800257a:	f7ff bf61 	b.w	8002440 <__sflush_r>
 800257e:	4b07      	ldr	r3, [pc, #28]	; (800259c <_fflush_r+0x4c>)
 8002580:	429c      	cmp	r4, r3
 8002582:	d101      	bne.n	8002588 <_fflush_r+0x38>
 8002584:	68ac      	ldr	r4, [r5, #8]
 8002586:	e7f1      	b.n	800256c <_fflush_r+0x1c>
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <_fflush_r+0x50>)
 800258a:	429c      	cmp	r4, r3
 800258c:	bf08      	it	eq
 800258e:	68ec      	ldreq	r4, [r5, #12]
 8002590:	e7ec      	b.n	800256c <_fflush_r+0x1c>
 8002592:	2000      	movs	r0, #0
 8002594:	bd38      	pop	{r3, r4, r5, pc}
 8002596:	bf00      	nop
 8002598:	08003170 	.word	0x08003170
 800259c:	08003190 	.word	0x08003190
 80025a0:	08003150 	.word	0x08003150

080025a4 <_cleanup_r>:
 80025a4:	4901      	ldr	r1, [pc, #4]	; (80025ac <_cleanup_r+0x8>)
 80025a6:	f000 b8a9 	b.w	80026fc <_fwalk_reent>
 80025aa:	bf00      	nop
 80025ac:	08002551 	.word	0x08002551

080025b0 <std.isra.0>:
 80025b0:	2300      	movs	r3, #0
 80025b2:	b510      	push	{r4, lr}
 80025b4:	4604      	mov	r4, r0
 80025b6:	6003      	str	r3, [r0, #0]
 80025b8:	6043      	str	r3, [r0, #4]
 80025ba:	6083      	str	r3, [r0, #8]
 80025bc:	8181      	strh	r1, [r0, #12]
 80025be:	6643      	str	r3, [r0, #100]	; 0x64
 80025c0:	81c2      	strh	r2, [r0, #14]
 80025c2:	6103      	str	r3, [r0, #16]
 80025c4:	6143      	str	r3, [r0, #20]
 80025c6:	6183      	str	r3, [r0, #24]
 80025c8:	4619      	mov	r1, r3
 80025ca:	2208      	movs	r2, #8
 80025cc:	305c      	adds	r0, #92	; 0x5c
 80025ce:	f7ff fdf3 	bl	80021b8 <memset>
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <std.isra.0+0x38>)
 80025d4:	6263      	str	r3, [r4, #36]	; 0x24
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <std.isra.0+0x3c>)
 80025d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <std.isra.0+0x40>)
 80025dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <std.isra.0+0x44>)
 80025e0:	6224      	str	r4, [r4, #32]
 80025e2:	6323      	str	r3, [r4, #48]	; 0x30
 80025e4:	bd10      	pop	{r4, pc}
 80025e6:	bf00      	nop
 80025e8:	08002f25 	.word	0x08002f25
 80025ec:	08002f47 	.word	0x08002f47
 80025f0:	08002f7f 	.word	0x08002f7f
 80025f4:	08002fa3 	.word	0x08002fa3

080025f8 <__sfmoreglue>:
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	1e4a      	subs	r2, r1, #1
 80025fc:	2568      	movs	r5, #104	; 0x68
 80025fe:	4355      	muls	r5, r2
 8002600:	460e      	mov	r6, r1
 8002602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002606:	f000 f949 	bl	800289c <_malloc_r>
 800260a:	4604      	mov	r4, r0
 800260c:	b140      	cbz	r0, 8002620 <__sfmoreglue+0x28>
 800260e:	2100      	movs	r1, #0
 8002610:	e880 0042 	stmia.w	r0, {r1, r6}
 8002614:	300c      	adds	r0, #12
 8002616:	60a0      	str	r0, [r4, #8]
 8002618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800261c:	f7ff fdcc 	bl	80021b8 <memset>
 8002620:	4620      	mov	r0, r4
 8002622:	bd70      	pop	{r4, r5, r6, pc}

08002624 <__sinit>:
 8002624:	6983      	ldr	r3, [r0, #24]
 8002626:	b510      	push	{r4, lr}
 8002628:	4604      	mov	r4, r0
 800262a:	bb33      	cbnz	r3, 800267a <__sinit+0x56>
 800262c:	6483      	str	r3, [r0, #72]	; 0x48
 800262e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002630:	6503      	str	r3, [r0, #80]	; 0x50
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <__sinit+0x58>)
 8002634:	4a12      	ldr	r2, [pc, #72]	; (8002680 <__sinit+0x5c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6282      	str	r2, [r0, #40]	; 0x28
 800263a:	4298      	cmp	r0, r3
 800263c:	bf04      	itt	eq
 800263e:	2301      	moveq	r3, #1
 8002640:	6183      	streq	r3, [r0, #24]
 8002642:	f000 f81f 	bl	8002684 <__sfp>
 8002646:	6060      	str	r0, [r4, #4]
 8002648:	4620      	mov	r0, r4
 800264a:	f000 f81b 	bl	8002684 <__sfp>
 800264e:	60a0      	str	r0, [r4, #8]
 8002650:	4620      	mov	r0, r4
 8002652:	f000 f817 	bl	8002684 <__sfp>
 8002656:	2200      	movs	r2, #0
 8002658:	60e0      	str	r0, [r4, #12]
 800265a:	2104      	movs	r1, #4
 800265c:	6860      	ldr	r0, [r4, #4]
 800265e:	f7ff ffa7 	bl	80025b0 <std.isra.0>
 8002662:	2201      	movs	r2, #1
 8002664:	2109      	movs	r1, #9
 8002666:	68a0      	ldr	r0, [r4, #8]
 8002668:	f7ff ffa2 	bl	80025b0 <std.isra.0>
 800266c:	2202      	movs	r2, #2
 800266e:	2112      	movs	r1, #18
 8002670:	68e0      	ldr	r0, [r4, #12]
 8002672:	f7ff ff9d 	bl	80025b0 <std.isra.0>
 8002676:	2301      	movs	r3, #1
 8002678:	61a3      	str	r3, [r4, #24]
 800267a:	bd10      	pop	{r4, pc}
 800267c:	0800314c 	.word	0x0800314c
 8002680:	080025a5 	.word	0x080025a5

08002684 <__sfp>:
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <__sfp+0x74>)
 8002688:	681e      	ldr	r6, [r3, #0]
 800268a:	69b3      	ldr	r3, [r6, #24]
 800268c:	4607      	mov	r7, r0
 800268e:	b913      	cbnz	r3, 8002696 <__sfp+0x12>
 8002690:	4630      	mov	r0, r6
 8002692:	f7ff ffc7 	bl	8002624 <__sinit>
 8002696:	3648      	adds	r6, #72	; 0x48
 8002698:	68b4      	ldr	r4, [r6, #8]
 800269a:	6873      	ldr	r3, [r6, #4]
 800269c:	3b01      	subs	r3, #1
 800269e:	d503      	bpl.n	80026a8 <__sfp+0x24>
 80026a0:	6833      	ldr	r3, [r6, #0]
 80026a2:	b133      	cbz	r3, 80026b2 <__sfp+0x2e>
 80026a4:	6836      	ldr	r6, [r6, #0]
 80026a6:	e7f7      	b.n	8002698 <__sfp+0x14>
 80026a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026ac:	b16d      	cbz	r5, 80026ca <__sfp+0x46>
 80026ae:	3468      	adds	r4, #104	; 0x68
 80026b0:	e7f4      	b.n	800269c <__sfp+0x18>
 80026b2:	2104      	movs	r1, #4
 80026b4:	4638      	mov	r0, r7
 80026b6:	f7ff ff9f 	bl	80025f8 <__sfmoreglue>
 80026ba:	6030      	str	r0, [r6, #0]
 80026bc:	2800      	cmp	r0, #0
 80026be:	d1f1      	bne.n	80026a4 <__sfp+0x20>
 80026c0:	230c      	movs	r3, #12
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4604      	mov	r4, r0
 80026c6:	4620      	mov	r0, r4
 80026c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ce:	81e3      	strh	r3, [r4, #14]
 80026d0:	2301      	movs	r3, #1
 80026d2:	81a3      	strh	r3, [r4, #12]
 80026d4:	6665      	str	r5, [r4, #100]	; 0x64
 80026d6:	6025      	str	r5, [r4, #0]
 80026d8:	60a5      	str	r5, [r4, #8]
 80026da:	6065      	str	r5, [r4, #4]
 80026dc:	6125      	str	r5, [r4, #16]
 80026de:	6165      	str	r5, [r4, #20]
 80026e0:	61a5      	str	r5, [r4, #24]
 80026e2:	2208      	movs	r2, #8
 80026e4:	4629      	mov	r1, r5
 80026e6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026ea:	f7ff fd65 	bl	80021b8 <memset>
 80026ee:	6365      	str	r5, [r4, #52]	; 0x34
 80026f0:	63a5      	str	r5, [r4, #56]	; 0x38
 80026f2:	64a5      	str	r5, [r4, #72]	; 0x48
 80026f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80026f6:	e7e6      	b.n	80026c6 <__sfp+0x42>
 80026f8:	0800314c 	.word	0x0800314c

080026fc <_fwalk_reent>:
 80026fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002700:	4680      	mov	r8, r0
 8002702:	4689      	mov	r9, r1
 8002704:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002708:	2600      	movs	r6, #0
 800270a:	b914      	cbnz	r4, 8002712 <_fwalk_reent+0x16>
 800270c:	4630      	mov	r0, r6
 800270e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002712:	68a5      	ldr	r5, [r4, #8]
 8002714:	6867      	ldr	r7, [r4, #4]
 8002716:	3f01      	subs	r7, #1
 8002718:	d501      	bpl.n	800271e <_fwalk_reent+0x22>
 800271a:	6824      	ldr	r4, [r4, #0]
 800271c:	e7f5      	b.n	800270a <_fwalk_reent+0xe>
 800271e:	89ab      	ldrh	r3, [r5, #12]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d907      	bls.n	8002734 <_fwalk_reent+0x38>
 8002724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002728:	3301      	adds	r3, #1
 800272a:	d003      	beq.n	8002734 <_fwalk_reent+0x38>
 800272c:	4629      	mov	r1, r5
 800272e:	4640      	mov	r0, r8
 8002730:	47c8      	blx	r9
 8002732:	4306      	orrs	r6, r0
 8002734:	3568      	adds	r5, #104	; 0x68
 8002736:	e7ee      	b.n	8002716 <_fwalk_reent+0x1a>

08002738 <__swhatbuf_r>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	460e      	mov	r6, r1
 800273c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002740:	2900      	cmp	r1, #0
 8002742:	b090      	sub	sp, #64	; 0x40
 8002744:	4614      	mov	r4, r2
 8002746:	461d      	mov	r5, r3
 8002748:	da07      	bge.n	800275a <__swhatbuf_r+0x22>
 800274a:	2300      	movs	r3, #0
 800274c:	602b      	str	r3, [r5, #0]
 800274e:	89b3      	ldrh	r3, [r6, #12]
 8002750:	061a      	lsls	r2, r3, #24
 8002752:	d410      	bmi.n	8002776 <__swhatbuf_r+0x3e>
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	e00e      	b.n	8002778 <__swhatbuf_r+0x40>
 800275a:	aa01      	add	r2, sp, #4
 800275c:	f000 fc48 	bl	8002ff0 <_fstat_r>
 8002760:	2800      	cmp	r0, #0
 8002762:	dbf2      	blt.n	800274a <__swhatbuf_r+0x12>
 8002764:	9a02      	ldr	r2, [sp, #8]
 8002766:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800276a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800276e:	425a      	negs	r2, r3
 8002770:	415a      	adcs	r2, r3
 8002772:	602a      	str	r2, [r5, #0]
 8002774:	e7ee      	b.n	8002754 <__swhatbuf_r+0x1c>
 8002776:	2340      	movs	r3, #64	; 0x40
 8002778:	2000      	movs	r0, #0
 800277a:	6023      	str	r3, [r4, #0]
 800277c:	b010      	add	sp, #64	; 0x40
 800277e:	bd70      	pop	{r4, r5, r6, pc}

08002780 <__smakebuf_r>:
 8002780:	898b      	ldrh	r3, [r1, #12]
 8002782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002784:	079d      	lsls	r5, r3, #30
 8002786:	4606      	mov	r6, r0
 8002788:	460c      	mov	r4, r1
 800278a:	d507      	bpl.n	800279c <__smakebuf_r+0x1c>
 800278c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002790:	6023      	str	r3, [r4, #0]
 8002792:	6123      	str	r3, [r4, #16]
 8002794:	2301      	movs	r3, #1
 8002796:	6163      	str	r3, [r4, #20]
 8002798:	b002      	add	sp, #8
 800279a:	bd70      	pop	{r4, r5, r6, pc}
 800279c:	ab01      	add	r3, sp, #4
 800279e:	466a      	mov	r2, sp
 80027a0:	f7ff ffca 	bl	8002738 <__swhatbuf_r>
 80027a4:	9900      	ldr	r1, [sp, #0]
 80027a6:	4605      	mov	r5, r0
 80027a8:	4630      	mov	r0, r6
 80027aa:	f000 f877 	bl	800289c <_malloc_r>
 80027ae:	b948      	cbnz	r0, 80027c4 <__smakebuf_r+0x44>
 80027b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027b4:	059a      	lsls	r2, r3, #22
 80027b6:	d4ef      	bmi.n	8002798 <__smakebuf_r+0x18>
 80027b8:	f023 0303 	bic.w	r3, r3, #3
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	81a3      	strh	r3, [r4, #12]
 80027c2:	e7e3      	b.n	800278c <__smakebuf_r+0xc>
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <__smakebuf_r+0x7c>)
 80027c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80027c8:	89a3      	ldrh	r3, [r4, #12]
 80027ca:	6020      	str	r0, [r4, #0]
 80027cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d0:	81a3      	strh	r3, [r4, #12]
 80027d2:	9b00      	ldr	r3, [sp, #0]
 80027d4:	6163      	str	r3, [r4, #20]
 80027d6:	9b01      	ldr	r3, [sp, #4]
 80027d8:	6120      	str	r0, [r4, #16]
 80027da:	b15b      	cbz	r3, 80027f4 <__smakebuf_r+0x74>
 80027dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027e0:	4630      	mov	r0, r6
 80027e2:	f000 fc17 	bl	8003014 <_isatty_r>
 80027e6:	b128      	cbz	r0, 80027f4 <__smakebuf_r+0x74>
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	f023 0303 	bic.w	r3, r3, #3
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	81a3      	strh	r3, [r4, #12]
 80027f4:	89a3      	ldrh	r3, [r4, #12]
 80027f6:	431d      	orrs	r5, r3
 80027f8:	81a5      	strh	r5, [r4, #12]
 80027fa:	e7cd      	b.n	8002798 <__smakebuf_r+0x18>
 80027fc:	080025a5 	.word	0x080025a5

08002800 <_free_r>:
 8002800:	b538      	push	{r3, r4, r5, lr}
 8002802:	4605      	mov	r5, r0
 8002804:	2900      	cmp	r1, #0
 8002806:	d045      	beq.n	8002894 <_free_r+0x94>
 8002808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800280c:	1f0c      	subs	r4, r1, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	bfb8      	it	lt
 8002812:	18e4      	addlt	r4, r4, r3
 8002814:	f000 fc20 	bl	8003058 <__malloc_lock>
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <_free_r+0x98>)
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	4610      	mov	r0, r2
 800281e:	b933      	cbnz	r3, 800282e <_free_r+0x2e>
 8002820:	6063      	str	r3, [r4, #4]
 8002822:	6014      	str	r4, [r2, #0]
 8002824:	4628      	mov	r0, r5
 8002826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800282a:	f000 bc16 	b.w	800305a <__malloc_unlock>
 800282e:	42a3      	cmp	r3, r4
 8002830:	d90c      	bls.n	800284c <_free_r+0x4c>
 8002832:	6821      	ldr	r1, [r4, #0]
 8002834:	1862      	adds	r2, r4, r1
 8002836:	4293      	cmp	r3, r2
 8002838:	bf04      	itt	eq
 800283a:	681a      	ldreq	r2, [r3, #0]
 800283c:	685b      	ldreq	r3, [r3, #4]
 800283e:	6063      	str	r3, [r4, #4]
 8002840:	bf04      	itt	eq
 8002842:	1852      	addeq	r2, r2, r1
 8002844:	6022      	streq	r2, [r4, #0]
 8002846:	6004      	str	r4, [r0, #0]
 8002848:	e7ec      	b.n	8002824 <_free_r+0x24>
 800284a:	4613      	mov	r3, r2
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	b10a      	cbz	r2, 8002854 <_free_r+0x54>
 8002850:	42a2      	cmp	r2, r4
 8002852:	d9fa      	bls.n	800284a <_free_r+0x4a>
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	1858      	adds	r0, r3, r1
 8002858:	42a0      	cmp	r0, r4
 800285a:	d10b      	bne.n	8002874 <_free_r+0x74>
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	4401      	add	r1, r0
 8002860:	1858      	adds	r0, r3, r1
 8002862:	4282      	cmp	r2, r0
 8002864:	6019      	str	r1, [r3, #0]
 8002866:	d1dd      	bne.n	8002824 <_free_r+0x24>
 8002868:	6810      	ldr	r0, [r2, #0]
 800286a:	6852      	ldr	r2, [r2, #4]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	4401      	add	r1, r0
 8002870:	6019      	str	r1, [r3, #0]
 8002872:	e7d7      	b.n	8002824 <_free_r+0x24>
 8002874:	d902      	bls.n	800287c <_free_r+0x7c>
 8002876:	230c      	movs	r3, #12
 8002878:	602b      	str	r3, [r5, #0]
 800287a:	e7d3      	b.n	8002824 <_free_r+0x24>
 800287c:	6820      	ldr	r0, [r4, #0]
 800287e:	1821      	adds	r1, r4, r0
 8002880:	428a      	cmp	r2, r1
 8002882:	bf04      	itt	eq
 8002884:	6811      	ldreq	r1, [r2, #0]
 8002886:	6852      	ldreq	r2, [r2, #4]
 8002888:	6062      	str	r2, [r4, #4]
 800288a:	bf04      	itt	eq
 800288c:	1809      	addeq	r1, r1, r0
 800288e:	6021      	streq	r1, [r4, #0]
 8002890:	605c      	str	r4, [r3, #4]
 8002892:	e7c7      	b.n	8002824 <_free_r+0x24>
 8002894:	bd38      	pop	{r3, r4, r5, pc}
 8002896:	bf00      	nop
 8002898:	200000b4 	.word	0x200000b4

0800289c <_malloc_r>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	1ccd      	adds	r5, r1, #3
 80028a0:	f025 0503 	bic.w	r5, r5, #3
 80028a4:	3508      	adds	r5, #8
 80028a6:	2d0c      	cmp	r5, #12
 80028a8:	bf38      	it	cc
 80028aa:	250c      	movcc	r5, #12
 80028ac:	2d00      	cmp	r5, #0
 80028ae:	4606      	mov	r6, r0
 80028b0:	db01      	blt.n	80028b6 <_malloc_r+0x1a>
 80028b2:	42a9      	cmp	r1, r5
 80028b4:	d903      	bls.n	80028be <_malloc_r+0x22>
 80028b6:	230c      	movs	r3, #12
 80028b8:	6033      	str	r3, [r6, #0]
 80028ba:	2000      	movs	r0, #0
 80028bc:	bd70      	pop	{r4, r5, r6, pc}
 80028be:	f000 fbcb 	bl	8003058 <__malloc_lock>
 80028c2:	4a23      	ldr	r2, [pc, #140]	; (8002950 <_malloc_r+0xb4>)
 80028c4:	6814      	ldr	r4, [r2, #0]
 80028c6:	4621      	mov	r1, r4
 80028c8:	b991      	cbnz	r1, 80028f0 <_malloc_r+0x54>
 80028ca:	4c22      	ldr	r4, [pc, #136]	; (8002954 <_malloc_r+0xb8>)
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	b91b      	cbnz	r3, 80028d8 <_malloc_r+0x3c>
 80028d0:	4630      	mov	r0, r6
 80028d2:	f000 fb17 	bl	8002f04 <_sbrk_r>
 80028d6:	6020      	str	r0, [r4, #0]
 80028d8:	4629      	mov	r1, r5
 80028da:	4630      	mov	r0, r6
 80028dc:	f000 fb12 	bl	8002f04 <_sbrk_r>
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d126      	bne.n	8002932 <_malloc_r+0x96>
 80028e4:	230c      	movs	r3, #12
 80028e6:	6033      	str	r3, [r6, #0]
 80028e8:	4630      	mov	r0, r6
 80028ea:	f000 fbb6 	bl	800305a <__malloc_unlock>
 80028ee:	e7e4      	b.n	80028ba <_malloc_r+0x1e>
 80028f0:	680b      	ldr	r3, [r1, #0]
 80028f2:	1b5b      	subs	r3, r3, r5
 80028f4:	d41a      	bmi.n	800292c <_malloc_r+0x90>
 80028f6:	2b0b      	cmp	r3, #11
 80028f8:	d90f      	bls.n	800291a <_malloc_r+0x7e>
 80028fa:	600b      	str	r3, [r1, #0]
 80028fc:	50cd      	str	r5, [r1, r3]
 80028fe:	18cc      	adds	r4, r1, r3
 8002900:	4630      	mov	r0, r6
 8002902:	f000 fbaa 	bl	800305a <__malloc_unlock>
 8002906:	f104 000b 	add.w	r0, r4, #11
 800290a:	1d23      	adds	r3, r4, #4
 800290c:	f020 0007 	bic.w	r0, r0, #7
 8002910:	1ac3      	subs	r3, r0, r3
 8002912:	d01b      	beq.n	800294c <_malloc_r+0xb0>
 8002914:	425a      	negs	r2, r3
 8002916:	50e2      	str	r2, [r4, r3]
 8002918:	bd70      	pop	{r4, r5, r6, pc}
 800291a:	428c      	cmp	r4, r1
 800291c:	bf0d      	iteet	eq
 800291e:	6863      	ldreq	r3, [r4, #4]
 8002920:	684b      	ldrne	r3, [r1, #4]
 8002922:	6063      	strne	r3, [r4, #4]
 8002924:	6013      	streq	r3, [r2, #0]
 8002926:	bf18      	it	ne
 8002928:	460c      	movne	r4, r1
 800292a:	e7e9      	b.n	8002900 <_malloc_r+0x64>
 800292c:	460c      	mov	r4, r1
 800292e:	6849      	ldr	r1, [r1, #4]
 8002930:	e7ca      	b.n	80028c8 <_malloc_r+0x2c>
 8002932:	1cc4      	adds	r4, r0, #3
 8002934:	f024 0403 	bic.w	r4, r4, #3
 8002938:	42a0      	cmp	r0, r4
 800293a:	d005      	beq.n	8002948 <_malloc_r+0xac>
 800293c:	1a21      	subs	r1, r4, r0
 800293e:	4630      	mov	r0, r6
 8002940:	f000 fae0 	bl	8002f04 <_sbrk_r>
 8002944:	3001      	adds	r0, #1
 8002946:	d0cd      	beq.n	80028e4 <_malloc_r+0x48>
 8002948:	6025      	str	r5, [r4, #0]
 800294a:	e7d9      	b.n	8002900 <_malloc_r+0x64>
 800294c:	bd70      	pop	{r4, r5, r6, pc}
 800294e:	bf00      	nop
 8002950:	200000b4 	.word	0x200000b4
 8002954:	200000b8 	.word	0x200000b8

08002958 <__sfputc_r>:
 8002958:	6893      	ldr	r3, [r2, #8]
 800295a:	3b01      	subs	r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	b410      	push	{r4}
 8002960:	6093      	str	r3, [r2, #8]
 8002962:	da09      	bge.n	8002978 <__sfputc_r+0x20>
 8002964:	6994      	ldr	r4, [r2, #24]
 8002966:	42a3      	cmp	r3, r4
 8002968:	db02      	blt.n	8002970 <__sfputc_r+0x18>
 800296a:	b2cb      	uxtb	r3, r1
 800296c:	2b0a      	cmp	r3, #10
 800296e:	d103      	bne.n	8002978 <__sfputc_r+0x20>
 8002970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002974:	f7ff bca4 	b.w	80022c0 <__swbuf_r>
 8002978:	6813      	ldr	r3, [r2, #0]
 800297a:	1c58      	adds	r0, r3, #1
 800297c:	6010      	str	r0, [r2, #0]
 800297e:	7019      	strb	r1, [r3, #0]
 8002980:	b2c8      	uxtb	r0, r1
 8002982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002986:	4770      	bx	lr

08002988 <__sfputs_r>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	4606      	mov	r6, r0
 800298c:	460f      	mov	r7, r1
 800298e:	4614      	mov	r4, r2
 8002990:	18d5      	adds	r5, r2, r3
 8002992:	42ac      	cmp	r4, r5
 8002994:	d101      	bne.n	800299a <__sfputs_r+0x12>
 8002996:	2000      	movs	r0, #0
 8002998:	e007      	b.n	80029aa <__sfputs_r+0x22>
 800299a:	463a      	mov	r2, r7
 800299c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029a0:	4630      	mov	r0, r6
 80029a2:	f7ff ffd9 	bl	8002958 <__sfputc_r>
 80029a6:	1c43      	adds	r3, r0, #1
 80029a8:	d1f3      	bne.n	8002992 <__sfputs_r+0xa>
 80029aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029ac <_vfiprintf_r>:
 80029ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b0:	b09d      	sub	sp, #116	; 0x74
 80029b2:	460c      	mov	r4, r1
 80029b4:	4617      	mov	r7, r2
 80029b6:	9303      	str	r3, [sp, #12]
 80029b8:	4606      	mov	r6, r0
 80029ba:	b118      	cbz	r0, 80029c4 <_vfiprintf_r+0x18>
 80029bc:	6983      	ldr	r3, [r0, #24]
 80029be:	b90b      	cbnz	r3, 80029c4 <_vfiprintf_r+0x18>
 80029c0:	f7ff fe30 	bl	8002624 <__sinit>
 80029c4:	4b7c      	ldr	r3, [pc, #496]	; (8002bb8 <_vfiprintf_r+0x20c>)
 80029c6:	429c      	cmp	r4, r3
 80029c8:	d157      	bne.n	8002a7a <_vfiprintf_r+0xce>
 80029ca:	6874      	ldr	r4, [r6, #4]
 80029cc:	89a3      	ldrh	r3, [r4, #12]
 80029ce:	0718      	lsls	r0, r3, #28
 80029d0:	d55d      	bpl.n	8002a8e <_vfiprintf_r+0xe2>
 80029d2:	6923      	ldr	r3, [r4, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05a      	beq.n	8002a8e <_vfiprintf_r+0xe2>
 80029d8:	2300      	movs	r3, #0
 80029da:	9309      	str	r3, [sp, #36]	; 0x24
 80029dc:	2320      	movs	r3, #32
 80029de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029e2:	2330      	movs	r3, #48	; 0x30
 80029e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029e8:	f04f 0b01 	mov.w	fp, #1
 80029ec:	46b8      	mov	r8, r7
 80029ee:	4645      	mov	r5, r8
 80029f0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d155      	bne.n	8002aa4 <_vfiprintf_r+0xf8>
 80029f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80029fc:	d00b      	beq.n	8002a16 <_vfiprintf_r+0x6a>
 80029fe:	4653      	mov	r3, sl
 8002a00:	463a      	mov	r2, r7
 8002a02:	4621      	mov	r1, r4
 8002a04:	4630      	mov	r0, r6
 8002a06:	f7ff ffbf 	bl	8002988 <__sfputs_r>
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	f000 80c4 	beq.w	8002b98 <_vfiprintf_r+0x1ec>
 8002a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a12:	4453      	add	r3, sl
 8002a14:	9309      	str	r3, [sp, #36]	; 0x24
 8002a16:	f898 3000 	ldrb.w	r3, [r8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80bc 	beq.w	8002b98 <_vfiprintf_r+0x1ec>
 8002a20:	2300      	movs	r3, #0
 8002a22:	f04f 32ff 	mov.w	r2, #4294967295
 8002a26:	9304      	str	r3, [sp, #16]
 8002a28:	9307      	str	r3, [sp, #28]
 8002a2a:	9205      	str	r2, [sp, #20]
 8002a2c:	9306      	str	r3, [sp, #24]
 8002a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a32:	931a      	str	r3, [sp, #104]	; 0x68
 8002a34:	2205      	movs	r2, #5
 8002a36:	7829      	ldrb	r1, [r5, #0]
 8002a38:	4860      	ldr	r0, [pc, #384]	; (8002bbc <_vfiprintf_r+0x210>)
 8002a3a:	f7fd fbd9 	bl	80001f0 <memchr>
 8002a3e:	f105 0801 	add.w	r8, r5, #1
 8002a42:	9b04      	ldr	r3, [sp, #16]
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d131      	bne.n	8002aac <_vfiprintf_r+0x100>
 8002a48:	06d9      	lsls	r1, r3, #27
 8002a4a:	bf44      	itt	mi
 8002a4c:	2220      	movmi	r2, #32
 8002a4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a52:	071a      	lsls	r2, r3, #28
 8002a54:	bf44      	itt	mi
 8002a56:	222b      	movmi	r2, #43	; 0x2b
 8002a58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a5c:	782a      	ldrb	r2, [r5, #0]
 8002a5e:	2a2a      	cmp	r2, #42	; 0x2a
 8002a60:	d02c      	beq.n	8002abc <_vfiprintf_r+0x110>
 8002a62:	9a07      	ldr	r2, [sp, #28]
 8002a64:	2100      	movs	r1, #0
 8002a66:	200a      	movs	r0, #10
 8002a68:	46a8      	mov	r8, r5
 8002a6a:	3501      	adds	r5, #1
 8002a6c:	f898 3000 	ldrb.w	r3, [r8]
 8002a70:	3b30      	subs	r3, #48	; 0x30
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	d96d      	bls.n	8002b52 <_vfiprintf_r+0x1a6>
 8002a76:	b371      	cbz	r1, 8002ad6 <_vfiprintf_r+0x12a>
 8002a78:	e026      	b.n	8002ac8 <_vfiprintf_r+0x11c>
 8002a7a:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <_vfiprintf_r+0x214>)
 8002a7c:	429c      	cmp	r4, r3
 8002a7e:	d101      	bne.n	8002a84 <_vfiprintf_r+0xd8>
 8002a80:	68b4      	ldr	r4, [r6, #8]
 8002a82:	e7a3      	b.n	80029cc <_vfiprintf_r+0x20>
 8002a84:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <_vfiprintf_r+0x218>)
 8002a86:	429c      	cmp	r4, r3
 8002a88:	bf08      	it	eq
 8002a8a:	68f4      	ldreq	r4, [r6, #12]
 8002a8c:	e79e      	b.n	80029cc <_vfiprintf_r+0x20>
 8002a8e:	4621      	mov	r1, r4
 8002a90:	4630      	mov	r0, r6
 8002a92:	f7ff fc67 	bl	8002364 <__swsetup_r>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d09e      	beq.n	80029d8 <_vfiprintf_r+0x2c>
 8002a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9e:	b01d      	add	sp, #116	; 0x74
 8002aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa4:	2b25      	cmp	r3, #37	; 0x25
 8002aa6:	d0a7      	beq.n	80029f8 <_vfiprintf_r+0x4c>
 8002aa8:	46a8      	mov	r8, r5
 8002aaa:	e7a0      	b.n	80029ee <_vfiprintf_r+0x42>
 8002aac:	4a43      	ldr	r2, [pc, #268]	; (8002bbc <_vfiprintf_r+0x210>)
 8002aae:	1a80      	subs	r0, r0, r2
 8002ab0:	fa0b f000 	lsl.w	r0, fp, r0
 8002ab4:	4318      	orrs	r0, r3
 8002ab6:	9004      	str	r0, [sp, #16]
 8002ab8:	4645      	mov	r5, r8
 8002aba:	e7bb      	b.n	8002a34 <_vfiprintf_r+0x88>
 8002abc:	9a03      	ldr	r2, [sp, #12]
 8002abe:	1d11      	adds	r1, r2, #4
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	9103      	str	r1, [sp, #12]
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	db01      	blt.n	8002acc <_vfiprintf_r+0x120>
 8002ac8:	9207      	str	r2, [sp, #28]
 8002aca:	e004      	b.n	8002ad6 <_vfiprintf_r+0x12a>
 8002acc:	4252      	negs	r2, r2
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	9207      	str	r2, [sp, #28]
 8002ad4:	9304      	str	r3, [sp, #16]
 8002ad6:	f898 3000 	ldrb.w	r3, [r8]
 8002ada:	2b2e      	cmp	r3, #46	; 0x2e
 8002adc:	d110      	bne.n	8002b00 <_vfiprintf_r+0x154>
 8002ade:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae4:	f108 0101 	add.w	r1, r8, #1
 8002ae8:	d137      	bne.n	8002b5a <_vfiprintf_r+0x1ae>
 8002aea:	9b03      	ldr	r3, [sp, #12]
 8002aec:	1d1a      	adds	r2, r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	9203      	str	r2, [sp, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bfb8      	it	lt
 8002af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002afa:	f108 0802 	add.w	r8, r8, #2
 8002afe:	9305      	str	r3, [sp, #20]
 8002b00:	4d31      	ldr	r5, [pc, #196]	; (8002bc8 <_vfiprintf_r+0x21c>)
 8002b02:	f898 1000 	ldrb.w	r1, [r8]
 8002b06:	2203      	movs	r2, #3
 8002b08:	4628      	mov	r0, r5
 8002b0a:	f7fd fb71 	bl	80001f0 <memchr>
 8002b0e:	b140      	cbz	r0, 8002b22 <_vfiprintf_r+0x176>
 8002b10:	2340      	movs	r3, #64	; 0x40
 8002b12:	1b40      	subs	r0, r0, r5
 8002b14:	fa03 f000 	lsl.w	r0, r3, r0
 8002b18:	9b04      	ldr	r3, [sp, #16]
 8002b1a:	4303      	orrs	r3, r0
 8002b1c:	9304      	str	r3, [sp, #16]
 8002b1e:	f108 0801 	add.w	r8, r8, #1
 8002b22:	f898 1000 	ldrb.w	r1, [r8]
 8002b26:	4829      	ldr	r0, [pc, #164]	; (8002bcc <_vfiprintf_r+0x220>)
 8002b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b2c:	2206      	movs	r2, #6
 8002b2e:	f108 0701 	add.w	r7, r8, #1
 8002b32:	f7fd fb5d 	bl	80001f0 <memchr>
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d034      	beq.n	8002ba4 <_vfiprintf_r+0x1f8>
 8002b3a:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <_vfiprintf_r+0x224>)
 8002b3c:	bb03      	cbnz	r3, 8002b80 <_vfiprintf_r+0x1d4>
 8002b3e:	9b03      	ldr	r3, [sp, #12]
 8002b40:	3307      	adds	r3, #7
 8002b42:	f023 0307 	bic.w	r3, r3, #7
 8002b46:	3308      	adds	r3, #8
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b4c:	444b      	add	r3, r9
 8002b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b50:	e74c      	b.n	80029ec <_vfiprintf_r+0x40>
 8002b52:	fb00 3202 	mla	r2, r0, r2, r3
 8002b56:	2101      	movs	r1, #1
 8002b58:	e786      	b.n	8002a68 <_vfiprintf_r+0xbc>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9305      	str	r3, [sp, #20]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	250a      	movs	r5, #10
 8002b62:	4688      	mov	r8, r1
 8002b64:	3101      	adds	r1, #1
 8002b66:	f898 2000 	ldrb.w	r2, [r8]
 8002b6a:	3a30      	subs	r2, #48	; 0x30
 8002b6c:	2a09      	cmp	r2, #9
 8002b6e:	d903      	bls.n	8002b78 <_vfiprintf_r+0x1cc>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0c5      	beq.n	8002b00 <_vfiprintf_r+0x154>
 8002b74:	9005      	str	r0, [sp, #20]
 8002b76:	e7c3      	b.n	8002b00 <_vfiprintf_r+0x154>
 8002b78:	fb05 2000 	mla	r0, r5, r0, r2
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e7f0      	b.n	8002b62 <_vfiprintf_r+0x1b6>
 8002b80:	ab03      	add	r3, sp, #12
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4622      	mov	r2, r4
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <_vfiprintf_r+0x228>)
 8002b88:	a904      	add	r1, sp, #16
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f3af 8000 	nop.w
 8002b90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b94:	4681      	mov	r9, r0
 8002b96:	d1d8      	bne.n	8002b4a <_vfiprintf_r+0x19e>
 8002b98:	89a3      	ldrh	r3, [r4, #12]
 8002b9a:	065b      	lsls	r3, r3, #25
 8002b9c:	f53f af7d 	bmi.w	8002a9a <_vfiprintf_r+0xee>
 8002ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ba2:	e77c      	b.n	8002a9e <_vfiprintf_r+0xf2>
 8002ba4:	ab03      	add	r3, sp, #12
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	4622      	mov	r2, r4
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <_vfiprintf_r+0x228>)
 8002bac:	a904      	add	r1, sp, #16
 8002bae:	4630      	mov	r0, r6
 8002bb0:	f000 f888 	bl	8002cc4 <_printf_i>
 8002bb4:	e7ec      	b.n	8002b90 <_vfiprintf_r+0x1e4>
 8002bb6:	bf00      	nop
 8002bb8:	08003170 	.word	0x08003170
 8002bbc:	080031b0 	.word	0x080031b0
 8002bc0:	08003190 	.word	0x08003190
 8002bc4:	08003150 	.word	0x08003150
 8002bc8:	080031b6 	.word	0x080031b6
 8002bcc:	080031ba 	.word	0x080031ba
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	08002989 	.word	0x08002989

08002bd8 <_printf_common>:
 8002bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bdc:	4691      	mov	r9, r2
 8002bde:	461f      	mov	r7, r3
 8002be0:	688a      	ldr	r2, [r1, #8]
 8002be2:	690b      	ldr	r3, [r1, #16]
 8002be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002be8:	4293      	cmp	r3, r2
 8002bea:	bfb8      	it	lt
 8002bec:	4613      	movlt	r3, r2
 8002bee:	f8c9 3000 	str.w	r3, [r9]
 8002bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bf6:	4606      	mov	r6, r0
 8002bf8:	460c      	mov	r4, r1
 8002bfa:	b112      	cbz	r2, 8002c02 <_printf_common+0x2a>
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f8c9 3000 	str.w	r3, [r9]
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	0699      	lsls	r1, r3, #26
 8002c06:	bf42      	ittt	mi
 8002c08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c0c:	3302      	addmi	r3, #2
 8002c0e:	f8c9 3000 	strmi.w	r3, [r9]
 8002c12:	6825      	ldr	r5, [r4, #0]
 8002c14:	f015 0506 	ands.w	r5, r5, #6
 8002c18:	d107      	bne.n	8002c2a <_printf_common+0x52>
 8002c1a:	f104 0a19 	add.w	sl, r4, #25
 8002c1e:	68e3      	ldr	r3, [r4, #12]
 8002c20:	f8d9 2000 	ldr.w	r2, [r9]
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	429d      	cmp	r5, r3
 8002c28:	db29      	blt.n	8002c7e <_printf_common+0xa6>
 8002c2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	3300      	adds	r3, #0
 8002c32:	bf18      	it	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	0692      	lsls	r2, r2, #26
 8002c38:	d42e      	bmi.n	8002c98 <_printf_common+0xc0>
 8002c3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c3e:	4639      	mov	r1, r7
 8002c40:	4630      	mov	r0, r6
 8002c42:	47c0      	blx	r8
 8002c44:	3001      	adds	r0, #1
 8002c46:	d021      	beq.n	8002c8c <_printf_common+0xb4>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	68e5      	ldr	r5, [r4, #12]
 8002c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8002c50:	f003 0306 	and.w	r3, r3, #6
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	bf08      	it	eq
 8002c58:	1aad      	subeq	r5, r5, r2
 8002c5a:	68a3      	ldr	r3, [r4, #8]
 8002c5c:	6922      	ldr	r2, [r4, #16]
 8002c5e:	bf0c      	ite	eq
 8002c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c64:	2500      	movne	r5, #0
 8002c66:	4293      	cmp	r3, r2
 8002c68:	bfc4      	itt	gt
 8002c6a:	1a9b      	subgt	r3, r3, r2
 8002c6c:	18ed      	addgt	r5, r5, r3
 8002c6e:	f04f 0900 	mov.w	r9, #0
 8002c72:	341a      	adds	r4, #26
 8002c74:	454d      	cmp	r5, r9
 8002c76:	d11b      	bne.n	8002cb0 <_printf_common+0xd8>
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c7e:	2301      	movs	r3, #1
 8002c80:	4652      	mov	r2, sl
 8002c82:	4639      	mov	r1, r7
 8002c84:	4630      	mov	r0, r6
 8002c86:	47c0      	blx	r8
 8002c88:	3001      	adds	r0, #1
 8002c8a:	d103      	bne.n	8002c94 <_printf_common+0xbc>
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c94:	3501      	adds	r5, #1
 8002c96:	e7c2      	b.n	8002c1e <_printf_common+0x46>
 8002c98:	18e1      	adds	r1, r4, r3
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	2030      	movs	r0, #48	; 0x30
 8002c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ca2:	4422      	add	r2, r4
 8002ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cac:	3302      	adds	r3, #2
 8002cae:	e7c4      	b.n	8002c3a <_printf_common+0x62>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	4639      	mov	r1, r7
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	47c0      	blx	r8
 8002cba:	3001      	adds	r0, #1
 8002cbc:	d0e6      	beq.n	8002c8c <_printf_common+0xb4>
 8002cbe:	f109 0901 	add.w	r9, r9, #1
 8002cc2:	e7d7      	b.n	8002c74 <_printf_common+0x9c>

08002cc4 <_printf_i>:
 8002cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cc8:	4617      	mov	r7, r2
 8002cca:	7e0a      	ldrb	r2, [r1, #24]
 8002ccc:	b085      	sub	sp, #20
 8002cce:	2a6e      	cmp	r2, #110	; 0x6e
 8002cd0:	4698      	mov	r8, r3
 8002cd2:	4606      	mov	r6, r0
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cd8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002cdc:	f000 80bc 	beq.w	8002e58 <_printf_i+0x194>
 8002ce0:	d81a      	bhi.n	8002d18 <_printf_i+0x54>
 8002ce2:	2a63      	cmp	r2, #99	; 0x63
 8002ce4:	d02e      	beq.n	8002d44 <_printf_i+0x80>
 8002ce6:	d80a      	bhi.n	8002cfe <_printf_i+0x3a>
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	f000 80c8 	beq.w	8002e7e <_printf_i+0x1ba>
 8002cee:	2a58      	cmp	r2, #88	; 0x58
 8002cf0:	f000 808a 	beq.w	8002e08 <_printf_i+0x144>
 8002cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cf8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002cfc:	e02a      	b.n	8002d54 <_printf_i+0x90>
 8002cfe:	2a64      	cmp	r2, #100	; 0x64
 8002d00:	d001      	beq.n	8002d06 <_printf_i+0x42>
 8002d02:	2a69      	cmp	r2, #105	; 0x69
 8002d04:	d1f6      	bne.n	8002cf4 <_printf_i+0x30>
 8002d06:	6821      	ldr	r1, [r4, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d0e:	d023      	beq.n	8002d58 <_printf_i+0x94>
 8002d10:	1d11      	adds	r1, r2, #4
 8002d12:	6019      	str	r1, [r3, #0]
 8002d14:	6813      	ldr	r3, [r2, #0]
 8002d16:	e027      	b.n	8002d68 <_printf_i+0xa4>
 8002d18:	2a73      	cmp	r2, #115	; 0x73
 8002d1a:	f000 80b4 	beq.w	8002e86 <_printf_i+0x1c2>
 8002d1e:	d808      	bhi.n	8002d32 <_printf_i+0x6e>
 8002d20:	2a6f      	cmp	r2, #111	; 0x6f
 8002d22:	d02a      	beq.n	8002d7a <_printf_i+0xb6>
 8002d24:	2a70      	cmp	r2, #112	; 0x70
 8002d26:	d1e5      	bne.n	8002cf4 <_printf_i+0x30>
 8002d28:	680a      	ldr	r2, [r1, #0]
 8002d2a:	f042 0220 	orr.w	r2, r2, #32
 8002d2e:	600a      	str	r2, [r1, #0]
 8002d30:	e003      	b.n	8002d3a <_printf_i+0x76>
 8002d32:	2a75      	cmp	r2, #117	; 0x75
 8002d34:	d021      	beq.n	8002d7a <_printf_i+0xb6>
 8002d36:	2a78      	cmp	r2, #120	; 0x78
 8002d38:	d1dc      	bne.n	8002cf4 <_printf_i+0x30>
 8002d3a:	2278      	movs	r2, #120	; 0x78
 8002d3c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002d40:	496e      	ldr	r1, [pc, #440]	; (8002efc <_printf_i+0x238>)
 8002d42:	e064      	b.n	8002e0e <_printf_i+0x14a>
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002d4a:	1d11      	adds	r1, r2, #4
 8002d4c:	6019      	str	r1, [r3, #0]
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0a3      	b.n	8002ea0 <_printf_i+0x1dc>
 8002d58:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d5c:	f102 0104 	add.w	r1, r2, #4
 8002d60:	6019      	str	r1, [r3, #0]
 8002d62:	d0d7      	beq.n	8002d14 <_printf_i+0x50>
 8002d64:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	da03      	bge.n	8002d74 <_printf_i+0xb0>
 8002d6c:	222d      	movs	r2, #45	; 0x2d
 8002d6e:	425b      	negs	r3, r3
 8002d70:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d74:	4962      	ldr	r1, [pc, #392]	; (8002f00 <_printf_i+0x23c>)
 8002d76:	220a      	movs	r2, #10
 8002d78:	e017      	b.n	8002daa <_printf_i+0xe6>
 8002d7a:	6820      	ldr	r0, [r4, #0]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d82:	d003      	beq.n	8002d8c <_printf_i+0xc8>
 8002d84:	1d08      	adds	r0, r1, #4
 8002d86:	6018      	str	r0, [r3, #0]
 8002d88:	680b      	ldr	r3, [r1, #0]
 8002d8a:	e006      	b.n	8002d9a <_printf_i+0xd6>
 8002d8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d90:	f101 0004 	add.w	r0, r1, #4
 8002d94:	6018      	str	r0, [r3, #0]
 8002d96:	d0f7      	beq.n	8002d88 <_printf_i+0xc4>
 8002d98:	880b      	ldrh	r3, [r1, #0]
 8002d9a:	4959      	ldr	r1, [pc, #356]	; (8002f00 <_printf_i+0x23c>)
 8002d9c:	2a6f      	cmp	r2, #111	; 0x6f
 8002d9e:	bf14      	ite	ne
 8002da0:	220a      	movne	r2, #10
 8002da2:	2208      	moveq	r2, #8
 8002da4:	2000      	movs	r0, #0
 8002da6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002daa:	6865      	ldr	r5, [r4, #4]
 8002dac:	60a5      	str	r5, [r4, #8]
 8002dae:	2d00      	cmp	r5, #0
 8002db0:	f2c0 809c 	blt.w	8002eec <_printf_i+0x228>
 8002db4:	6820      	ldr	r0, [r4, #0]
 8002db6:	f020 0004 	bic.w	r0, r0, #4
 8002dba:	6020      	str	r0, [r4, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13f      	bne.n	8002e40 <_printf_i+0x17c>
 8002dc0:	2d00      	cmp	r5, #0
 8002dc2:	f040 8095 	bne.w	8002ef0 <_printf_i+0x22c>
 8002dc6:	4675      	mov	r5, lr
 8002dc8:	2a08      	cmp	r2, #8
 8002dca:	d10b      	bne.n	8002de4 <_printf_i+0x120>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	07da      	lsls	r2, r3, #31
 8002dd0:	d508      	bpl.n	8002de4 <_printf_i+0x120>
 8002dd2:	6923      	ldr	r3, [r4, #16]
 8002dd4:	6862      	ldr	r2, [r4, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	bfde      	ittt	le
 8002dda:	2330      	movle	r3, #48	; 0x30
 8002ddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002de0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002de4:	ebae 0305 	sub.w	r3, lr, r5
 8002de8:	6123      	str	r3, [r4, #16]
 8002dea:	f8cd 8000 	str.w	r8, [sp]
 8002dee:	463b      	mov	r3, r7
 8002df0:	aa03      	add	r2, sp, #12
 8002df2:	4621      	mov	r1, r4
 8002df4:	4630      	mov	r0, r6
 8002df6:	f7ff feef 	bl	8002bd8 <_printf_common>
 8002dfa:	3001      	adds	r0, #1
 8002dfc:	d155      	bne.n	8002eaa <_printf_i+0x1e6>
 8002dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002e02:	b005      	add	sp, #20
 8002e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e08:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002e0c:	493c      	ldr	r1, [pc, #240]	; (8002f00 <_printf_i+0x23c>)
 8002e0e:	6822      	ldr	r2, [r4, #0]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e16:	f100 0504 	add.w	r5, r0, #4
 8002e1a:	601d      	str	r5, [r3, #0]
 8002e1c:	d001      	beq.n	8002e22 <_printf_i+0x15e>
 8002e1e:	6803      	ldr	r3, [r0, #0]
 8002e20:	e002      	b.n	8002e28 <_printf_i+0x164>
 8002e22:	0655      	lsls	r5, r2, #25
 8002e24:	d5fb      	bpl.n	8002e1e <_printf_i+0x15a>
 8002e26:	8803      	ldrh	r3, [r0, #0]
 8002e28:	07d0      	lsls	r0, r2, #31
 8002e2a:	bf44      	itt	mi
 8002e2c:	f042 0220 	orrmi.w	r2, r2, #32
 8002e30:	6022      	strmi	r2, [r4, #0]
 8002e32:	b91b      	cbnz	r3, 8002e3c <_printf_i+0x178>
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	f022 0220 	bic.w	r2, r2, #32
 8002e3a:	6022      	str	r2, [r4, #0]
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	e7b1      	b.n	8002da4 <_printf_i+0xe0>
 8002e40:	4675      	mov	r5, lr
 8002e42:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e46:	fb02 3310 	mls	r3, r2, r0, r3
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e50:	4603      	mov	r3, r0
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d1f5      	bne.n	8002e42 <_printf_i+0x17e>
 8002e56:	e7b7      	b.n	8002dc8 <_printf_i+0x104>
 8002e58:	6808      	ldr	r0, [r1, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	6949      	ldr	r1, [r1, #20]
 8002e5e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e62:	d004      	beq.n	8002e6e <_printf_i+0x1aa>
 8002e64:	1d10      	adds	r0, r2, #4
 8002e66:	6018      	str	r0, [r3, #0]
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	6019      	str	r1, [r3, #0]
 8002e6c:	e007      	b.n	8002e7e <_printf_i+0x1ba>
 8002e6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e72:	f102 0004 	add.w	r0, r2, #4
 8002e76:	6018      	str	r0, [r3, #0]
 8002e78:	6813      	ldr	r3, [r2, #0]
 8002e7a:	d0f6      	beq.n	8002e6a <_printf_i+0x1a6>
 8002e7c:	8019      	strh	r1, [r3, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	6123      	str	r3, [r4, #16]
 8002e82:	4675      	mov	r5, lr
 8002e84:	e7b1      	b.n	8002dea <_printf_i+0x126>
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	1d11      	adds	r1, r2, #4
 8002e8a:	6019      	str	r1, [r3, #0]
 8002e8c:	6815      	ldr	r5, [r2, #0]
 8002e8e:	6862      	ldr	r2, [r4, #4]
 8002e90:	2100      	movs	r1, #0
 8002e92:	4628      	mov	r0, r5
 8002e94:	f7fd f9ac 	bl	80001f0 <memchr>
 8002e98:	b108      	cbz	r0, 8002e9e <_printf_i+0x1da>
 8002e9a:	1b40      	subs	r0, r0, r5
 8002e9c:	6060      	str	r0, [r4, #4]
 8002e9e:	6863      	ldr	r3, [r4, #4]
 8002ea0:	6123      	str	r3, [r4, #16]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ea8:	e79f      	b.n	8002dea <_printf_i+0x126>
 8002eaa:	6923      	ldr	r3, [r4, #16]
 8002eac:	462a      	mov	r2, r5
 8002eae:	4639      	mov	r1, r7
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	47c0      	blx	r8
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	d0a2      	beq.n	8002dfe <_printf_i+0x13a>
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	079b      	lsls	r3, r3, #30
 8002ebc:	d507      	bpl.n	8002ece <_printf_i+0x20a>
 8002ebe:	2500      	movs	r5, #0
 8002ec0:	f104 0919 	add.w	r9, r4, #25
 8002ec4:	68e3      	ldr	r3, [r4, #12]
 8002ec6:	9a03      	ldr	r2, [sp, #12]
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	429d      	cmp	r5, r3
 8002ecc:	db05      	blt.n	8002eda <_printf_i+0x216>
 8002ece:	68e0      	ldr	r0, [r4, #12]
 8002ed0:	9b03      	ldr	r3, [sp, #12]
 8002ed2:	4298      	cmp	r0, r3
 8002ed4:	bfb8      	it	lt
 8002ed6:	4618      	movlt	r0, r3
 8002ed8:	e793      	b.n	8002e02 <_printf_i+0x13e>
 8002eda:	2301      	movs	r3, #1
 8002edc:	464a      	mov	r2, r9
 8002ede:	4639      	mov	r1, r7
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	47c0      	blx	r8
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d08a      	beq.n	8002dfe <_printf_i+0x13a>
 8002ee8:	3501      	adds	r5, #1
 8002eea:	e7eb      	b.n	8002ec4 <_printf_i+0x200>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1a7      	bne.n	8002e40 <_printf_i+0x17c>
 8002ef0:	780b      	ldrb	r3, [r1, #0]
 8002ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ef6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002efa:	e765      	b.n	8002dc8 <_printf_i+0x104>
 8002efc:	080031d2 	.word	0x080031d2
 8002f00:	080031c1 	.word	0x080031c1

08002f04 <_sbrk_r>:
 8002f04:	b538      	push	{r3, r4, r5, lr}
 8002f06:	4c06      	ldr	r4, [pc, #24]	; (8002f20 <_sbrk_r+0x1c>)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	4605      	mov	r5, r0
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	6023      	str	r3, [r4, #0]
 8002f10:	f7fe ffdc 	bl	8001ecc <_sbrk>
 8002f14:	1c43      	adds	r3, r0, #1
 8002f16:	d102      	bne.n	8002f1e <_sbrk_r+0x1a>
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	b103      	cbz	r3, 8002f1e <_sbrk_r+0x1a>
 8002f1c:	602b      	str	r3, [r5, #0]
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}
 8002f20:	20000234 	.word	0x20000234

08002f24 <__sread>:
 8002f24:	b510      	push	{r4, lr}
 8002f26:	460c      	mov	r4, r1
 8002f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f2c:	f000 f896 	bl	800305c <_read_r>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	bfab      	itete	ge
 8002f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f36:	89a3      	ldrhlt	r3, [r4, #12]
 8002f38:	181b      	addge	r3, r3, r0
 8002f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f3e:	bfac      	ite	ge
 8002f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f42:	81a3      	strhlt	r3, [r4, #12]
 8002f44:	bd10      	pop	{r4, pc}

08002f46 <__swrite>:
 8002f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f4a:	461f      	mov	r7, r3
 8002f4c:	898b      	ldrh	r3, [r1, #12]
 8002f4e:	05db      	lsls	r3, r3, #23
 8002f50:	4605      	mov	r5, r0
 8002f52:	460c      	mov	r4, r1
 8002f54:	4616      	mov	r6, r2
 8002f56:	d505      	bpl.n	8002f64 <__swrite+0x1e>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f60:	f000 f868 	bl	8003034 <_lseek_r>
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f6e:	81a3      	strh	r3, [r4, #12]
 8002f70:	4632      	mov	r2, r6
 8002f72:	463b      	mov	r3, r7
 8002f74:	4628      	mov	r0, r5
 8002f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f7a:	f000 b817 	b.w	8002fac <_write_r>

08002f7e <__sseek>:
 8002f7e:	b510      	push	{r4, lr}
 8002f80:	460c      	mov	r4, r1
 8002f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f86:	f000 f855 	bl	8003034 <_lseek_r>
 8002f8a:	1c43      	adds	r3, r0, #1
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	bf15      	itete	ne
 8002f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f9a:	81a3      	strheq	r3, [r4, #12]
 8002f9c:	bf18      	it	ne
 8002f9e:	81a3      	strhne	r3, [r4, #12]
 8002fa0:	bd10      	pop	{r4, pc}

08002fa2 <__sclose>:
 8002fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa6:	f000 b813 	b.w	8002fd0 <_close_r>
	...

08002fac <_write_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4c07      	ldr	r4, [pc, #28]	; (8002fcc <_write_r+0x20>)
 8002fb0:	4605      	mov	r5, r0
 8002fb2:	4608      	mov	r0, r1
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	6022      	str	r2, [r4, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f7fe ff6c 	bl	8001e98 <_write>
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	d102      	bne.n	8002fca <_write_r+0x1e>
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	b103      	cbz	r3, 8002fca <_write_r+0x1e>
 8002fc8:	602b      	str	r3, [r5, #0]
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
 8002fcc:	20000234 	.word	0x20000234

08002fd0 <_close_r>:
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	4c06      	ldr	r4, [pc, #24]	; (8002fec <_close_r+0x1c>)
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	4605      	mov	r5, r0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	6023      	str	r3, [r4, #0]
 8002fdc:	f7fe ff90 	bl	8001f00 <_close>
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	d102      	bne.n	8002fea <_close_r+0x1a>
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	b103      	cbz	r3, 8002fea <_close_r+0x1a>
 8002fe8:	602b      	str	r3, [r5, #0]
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
 8002fec:	20000234 	.word	0x20000234

08002ff0 <_fstat_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	4c07      	ldr	r4, [pc, #28]	; (8003010 <_fstat_r+0x20>)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	4605      	mov	r5, r0
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	6023      	str	r3, [r4, #0]
 8002ffe:	f7fe ff82 	bl	8001f06 <_fstat>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	d102      	bne.n	800300c <_fstat_r+0x1c>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	b103      	cbz	r3, 800300c <_fstat_r+0x1c>
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	bd38      	pop	{r3, r4, r5, pc}
 800300e:	bf00      	nop
 8003010:	20000234 	.word	0x20000234

08003014 <_isatty_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4c06      	ldr	r4, [pc, #24]	; (8003030 <_isatty_r+0x1c>)
 8003018:	2300      	movs	r3, #0
 800301a:	4605      	mov	r5, r0
 800301c:	4608      	mov	r0, r1
 800301e:	6023      	str	r3, [r4, #0]
 8003020:	f7fe ff76 	bl	8001f10 <_isatty>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d102      	bne.n	800302e <_isatty_r+0x1a>
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	b103      	cbz	r3, 800302e <_isatty_r+0x1a>
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	20000234 	.word	0x20000234

08003034 <_lseek_r>:
 8003034:	b538      	push	{r3, r4, r5, lr}
 8003036:	4c07      	ldr	r4, [pc, #28]	; (8003054 <_lseek_r+0x20>)
 8003038:	4605      	mov	r5, r0
 800303a:	4608      	mov	r0, r1
 800303c:	4611      	mov	r1, r2
 800303e:	2200      	movs	r2, #0
 8003040:	6022      	str	r2, [r4, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	f7fe ff66 	bl	8001f14 <_lseek>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d102      	bne.n	8003052 <_lseek_r+0x1e>
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	b103      	cbz	r3, 8003052 <_lseek_r+0x1e>
 8003050:	602b      	str	r3, [r5, #0]
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	20000234 	.word	0x20000234

08003058 <__malloc_lock>:
 8003058:	4770      	bx	lr

0800305a <__malloc_unlock>:
 800305a:	4770      	bx	lr

0800305c <_read_r>:
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	4c07      	ldr	r4, [pc, #28]	; (800307c <_read_r+0x20>)
 8003060:	4605      	mov	r5, r0
 8003062:	4608      	mov	r0, r1
 8003064:	4611      	mov	r1, r2
 8003066:	2200      	movs	r2, #0
 8003068:	6022      	str	r2, [r4, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	f7fe ff06 	bl	8001e7c <_read>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d102      	bne.n	800307a <_read_r+0x1e>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	b103      	cbz	r3, 800307a <_read_r+0x1e>
 8003078:	602b      	str	r3, [r5, #0]
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	20000234 	.word	0x20000234

08003080 <_init>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr

0800308c <_fini>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr
